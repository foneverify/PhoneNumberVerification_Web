$(function() {
	$('#text_page_btn, #text_page_btn1,#text_page_btn2').on('click', function() {
		FvVariables.currentScreen = "";
		location.href = "verification_UI.html";
	});
	var guiData = {
		beforeSend : FvApiCallbacks.logoutApi.beforeSend,
		callback : FvApiCallbacks.logoutApi.success
	};
	var sessionCookies = Util.getCookie(CookieNames()['sessionId']);
	if (Util.isDefined(sessionCookies)) {
		$("#logout").on('click', {
			guiData : guiData,
			getPostData : FvApiCallbacks.logoutApi.getPostData
		}, FvApis.logout);
	}
	var user_firstname = '';
	if (Util.isDefined(Util.getCookie(CookieNames()['userName'])) && Util.getCookie(CookieNames()['userName']).indexOf(' ') >= 0) {
		user_firstname = "Hi, " + Util.getCookie(CookieNames()['userName']).substring(0, Util.getCookie(CookieNames()['userName']).indexOf(' ')) + "!";
	} else if (Util.isDefined(Util.getCookie(CookieNames()['userName']))) {
		user_firstname = "Hi, " + Util.getCookie(CookieNames()['userName']) + "!";
	} else {
		user_firstname = "Hi!";
	}
	$('#dashboardUser_name').text(user_firstname);
	setTimeout(function() {
		if (Util.isDefined($('#dashboardUser_name').text())) {
			var user_firstname = '';
			if (Util.isDefined(Util.getCookie(CookieNames()['userName'])) && Util.getCookie(CookieNames()['userName']).indexOf(' ') >= 0) {
				user_firstname = "Hi, " + Util.getCookie(CookieNames()['userName']).substring(0, Util.getCookie(CookieNames()['userName']).indexOf(' ')) + "!";
			} else if (Util.isDefined(Util.getCookie(CookieNames()['userName']))) {
				user_firstname = "Hi, " + Util.getCookie(CookieNames()['userName']) + "!";
			} else {
				user_firstname = "Hi!";
			}
			$('#dashboardUser_name').text(user_firstname);
		}
	}, 500);
});

Util = function() {
	return {
		getUrlParam : function(sParam) {
			var sPageURL = decodeURIComponent(window.location.search.substring(1));
			var sURLVariables = sPageURL.split('&');
			for ( i = 0; i < sURLVariables.length; i++) {
				sParameterName = sURLVariables[i].split('=');
				if (sParameterName[0] === sParam) {
					return sParameterName[1] === undefined ? true : sParameterName[1];
				}
			}
		},

		time_ago : function(time) {
			switch (typeof time) {
			case 'number':
				break;
			case 'string':
				time = +new Date(time);
				break;
			case 'object':
				if (time.constructor === Date)
					time = time.getTime();
				break;
			default:
				time = +new Date();
			}
			var time_formats = [[60, 'seconds', 1], // 60
			[120, '1 minute ago', '1 minute from now'], // 60*2
			[3600, 'minutes', 60], // 60*60, 60
			[7200, '1 hour ago', '1 hour from now'], // 60*60*2
			[86400, 'hours', 3600], // 60*60*24, 60*60
			[172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2
			[604800, 'days', 86400], // 60*60*24*7, 60*60*24
			[1209600, 'Last week', 'Next week'], // 60*60*24*7*4*2
			[2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7
			[4838400, 'Last month', 'Next month'], // 60*60*24*7*4*2
			[29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4
			[58060800, 'Last year', 'Next year'], // 60*60*24*7*4*12*2
			[2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12
			[5806080000, 'Last century', 'Next century'], // 60*60*24*7*4*12*100*2
			[58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100
			];
			var seconds = (+new Date() - time) / 1000,
			    token = 'ago',
			    list_choice = 1;

			if (seconds == 0) {
				return 'Just now'
			}
			if (seconds < 0) {
				seconds = Math.abs(seconds);
				token = 'from now';
				list_choice = 2;
			}
			var i = 0,
			    format;
			while ( format = time_formats[i++])
			if (seconds < format[0]) {
				if ( typeof format[2] == 'string')
					return format[list_choice];
				else
					return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ' + token;
			}
			return time;
		},

		getDiffInDays : function(date2, date1) {
			var timeDiff = Math.abs(date2.getTime() - date1.getTime());
			var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
			//alert(diffDays);
			return diffDays;
		},

		disableLink : function(elId) {
			$('#' + elId).click(function(e) {
				e.preventDefault();
				return false;
			});
			$('#' + elId).css({
				cursor : "default"
			});
		},

		enableLink : function(elId, eventData, fn) {
			$('#' + elId).on('click', eventData, fn);
			$('#' + elId).css({
				cursor : "pointer"
			});
		},

		jumpNext : function(thisEl, nextElId) {
			if (thisEl.value.length >= thisEl.maxLength) {
				$('#' + nextElId).focus();
			}
		},

		rpHash : function(code) {
			var hash = 5381;
			var value = code.toUpperCase();
			for (var i = 0; i < value.length; i++) {
				hash = ((hash << 5) + hash) + value.charCodeAt(i);
			}
			return hash.toString();
		},

		alert_message : function(elem, message) {
			$("#alert_message").html(message);
			$(elem).modal("show");
		},
		alert_message_verificatn_req : function(elem, message) {
			$("#alert_message").html(message);
			$(elem).modal("show");
			$('#alert_btn_div1').hasClass('disable_popup_btns_verif_req') ? '' : $('#alert_btn_div1').removeClass('enable_popup_btns_verif_req').addClass('disable_popup_btns_verif_req');
			$('#alert_btn_div2').hasClass('disable_popup_btns_verif_req') ? '' : $('#alert_btn_div2').removeClass('enable_popup_btns_verif_req').addClass('disable_popup_btns_verif_req');
			$('#alert_btn_div3').hasClass('disable_popup_btns_verif_req') ? '' : $('#alert_btn_div3').removeClass('enable_popup_btns_verif_req').addClass('disable_popup_btns_verif_req');
		},

		isDefined : function(variable) {
			return variable !== null && typeof variable !== 'undefined';
		},

		checkGuestSession : function() {
			var isGuest = Util.getCookie(CookieNames()['isGuest']);
			if (Util.isDefined(isGuest) && isGuest == 'true') {
				window.location.href = "user-verification.html";
			}
		},

		checkSession : function() {
			var session = Util.getCookie(CookieNames()['sessionId']);
			if (!Util.isDefined(session)) {
				window.location.href = "index.html";
				return;
			}
		},
		setCookie : function(name, value, expdays) {
			var cookie = name + "=" + value + "; path=/";
			if (expdays) {
				var date = new Date();
				date.setTime(date.getTime() + (expdays * 24 * 3600 * 1000));
				cookie += "; expires=" + date.toUTCString();
			}
			console.info("setting the cookie: " + cookie);
			document.cookie = cookie;
		},
		getCookie : function(name) {
			var key = name + "=";
			var allcookies = document.cookie.split(';');
			for (var i = 0; i < allcookies.length; ++i) {
				var kv = allcookies[i];
				while (kv.charAt(0) == ' ')
				kv = kv.substring(1);
				if (kv.indexOf(name) == 0) {
					var value = kv.substring(name.length, kv.length).replace('=', '');
					//console.log("cookie with name [" + name + "] found with value=[" + value + "]");
					return value;
				}
			}
		},
		redirectToIndex : function() {
			// del. the cookies
			var cnames = CookieNames();
			for (var key in cnames) {
				//console.log("deleting cookie >" + key + "<");
				if (cnames.hasOwnProperty(key)) {
					Util.deleteCookie(cnames[key]);
				}
			}
			// alert("session out.");
			Util.alert_message('#alert_template', "Your session has timed out. Please login again.");
			setTimeout(function() {
				window.location.href = "index.html";
			}, 5000);

		},
		deleteCookie : function(name) {
			if (Util.getCookie(name)) {
				//console.log("cookie[" + name + "] found, deleting it");
				document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';
			} else {
				console.error("cookie[" + name + "] not found");
			}
		},
		firstDayOfWeek : function(year, week) {/* logic borrowed from so */
			var date = new Date(year, 0, 1);
			var offset = date.getTimezoneOffset();
			// ISO: week 1 is the one with the year's first Thursday
			// so nearest Thursday: current date + 4 - current day number
			// Sunday is converted from 0 to 7
			date.setDate(date.getDate() + 4 - (date.getDay() || 7));
			// 7 days * (week - overlapping first week)
			date.setTime(date.getTime() + 7 * 24 * 60 * 60 * 1000 * (week + (year == date.getFullYear() ? -1 : 0 )));
			// daylight savings fix
			date.setTime(date.getTime() + (date.getTimezoneOffset() - offset) * 60 * 1000);
			// back to Monday (from Thursday)
			date.setDate(date.getDate() - 3);
			return date;
		},
		isApiDataPresent : function(data) {
			var isPresent = true;
			if (!Util.isDefined(data)) {
				isPresent = false;
			} else {
				// check data must have mandatory post data
				if (!Util.isDefined(data.getPostData)) {
					isPresent = false;
				}
			}
			return isPresent;
		},
		isGuiDataPresent : function(data) {
			var isPresent = true;
			if (!Util.isDefined(data))
				isPresent = false;
			else if (!Util.isDefined(data.guiData))
				isPresent = false;
			return isPresent;
		},
		isApiReqValid : function(eventData) {
			//console.log("isApiReqValid enter");
			var postData = {};
			var isValid = true;

			if (Util.isDefined(eventData) && Util.isDefined(eventData.data) && Util.isApiDataPresent(eventData.data)) {
				//console.log("API request has cb for post-data, proceeding.");
				postData = eventData.data.getPostData();
				//console.log("postData for api : " + JSON.stringify(postData));
			} else {
				//console.log("API has no post-data cb present")
				isValid = false;
			}
			//console.log("isApiReqValid exit");
			return {
				isValid : isValid,
				postData : postData
			};
		},
		hdlSuccessResponse : function(apiName, msg, eventData) {
			try {
				if ( typeof msg == 'string') {
					var jsonObj = $.parseJSON(msg);
				} else {
					var jsonObj = msg;
				}
				console.info("json response " + JSON.stringify(jsonObj));
			} catch(ex) {
				console.error('error while parsing json object, exception: ' + ex);
				return;
			}

			console.info(apiName + " API got successful json response");
			if (Util.isDefined(eventData.data.guiData) && Util.isDefined(eventData.data.guiData.callback)) {
				eventData.data.guiData.callback(eventData.data.guiData, jsonObj);
			}
		},
		toCamelCaseConverter : function(str) {
			str.replace(/(?:^|\s)\w/g, function(match) {
				return match.toUpperCase();
			});
		},
		launchSkypeWithId : function(id) {
			window.location = 'skype:' + id + '?chat';
		},
		getCurrentOrLastYearDate : function(req) {
			var today = new Date();
			var dd = today.getDate();
			var mm = today.getMonth() + 1;
			//January is 0!
			var yyyy = today.getFullYear();

			if (dd < 10) {
				dd = '0' + dd
			}

			if (mm < 10) {
				mm = '0' + mm
			}
			if (req == 'currentMonth') {
				today = yyyy + '-' + mm + '-' + dd;
			} else {
				if (mm == 01) {
					mm = 12;
					yyyy = yyyy - 1;
				} else {
					mm = mm - 1;
				}
				if (mm < 10) {
					mm = '0' + mm
				}
				today = yyyy + '-' + mm + '-' + dd;
			}

			return today;
		},
		getFormattedDate : function(date) {
			var today = new Date(date);
			var dd = today.getDate();
			var mm = today.getMonth() + 1;
			//January is 0!
			var yyyy = today.getFullYear();

			if (dd < 10) {
				dd = '0' + dd
			}

			if (mm < 10) {
				mm = '0' + mm
			}
			today = yyyy + '-' + mm + '-' + dd;
			return today;
		},
		getFormattedTime : function(time) {
			var seconds = 9999;
			// multiply by 1000 because Date() requires miliseconds
			var date = new Date(time);
			var hh = date.getUTCHours();
			var mm = date.getUTCMinutes();
			var ss = date.getSeconds();
			// If you were building a timestamp instead of a duration, you would uncomment the following line to get 12-hour (not 24) time
			// if (hh > 12) {hh = hh % 12;}
			// These lines ensure you have two-digits
			if (hh < 10) {
				hh = "0" + hh;
			}
			if (mm < 10) {
				mm = "0" + mm;
			}
			if (ss < 10) {
				ss = "0" + ss;
			}
			// This formats your string to HH:MM:SS
			var t = hh + ":" + mm + ":" + ss;
			return t;
		},
		validateForm : function(fields) {
			Util.resetAllErrorMessage(fields);
			var validationCheckVar = false;
			// loop all fields
			for (var i = 0; i < fields.length; i++) {
				field = fields[i];
				// ignore buttons, fieldsets, etc.
				if (field.nodeName !== "INPUT" && field.nodeName !== "TEXTAREA" && field.nodeName !== "SELECT")
					continue;

				if (FvVariables.target == 'next') {
					if (FvVariables.signupFields.indexOf(field.id) >= 0) {
						validationCheckVar = LegacyValidation(field);
						if (validationCheckVar === false) {
							if (field.id != null && field.id != undefined) {
								Util.displayErrorMessage(field);
								break;
							}
						}
					}
				} else {
					validationCheckVar = LegacyValidation(field);
					if (validationCheckVar === false) {
						if (field.id != null && field.id != undefined) {
							Util.displayErrorMessage(field);
							break;
						}
					}
				}

			}
			return validationCheckVar;
		},
		resetAllErrorMessage : function(fields) {
			// reset all the error messages to blank for all fields before adding new.
			for (var i = 0; i < fields.length; i++) {
				field = fields[i];
				$('#' + field.id).css('border', '1px solid #aaa');
				$("#" + field.id + "Error").text("");
			}
			Util.isDefined($('#status')) ? $('#status').text("") : '';
		},
		checkEmail : function(email) {
			//Validate email pattern.
			var validEmail = true;
			var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
			if (!filter.test(email)) {
				validEmail = false;
			} else {
				validEmail = true;
			}
			return validEmail;
		},
		displayErrorMessage : function(field) {
			// display error message to the error span below each field.
			if (field.tagName == 'select') {
				$('select #' + field.id).css('border', '1px solid red');
			} else {
				$('#' + field.id).css('border', '1px solid red');
			}
			$("#" + field.id + "Error").text(FvVariables.errorMessage);
		},
		sendEmail : function(emailId) {
			location.href = 'mailto:' + emailId;
			setTimeout(function() {
				window.close();
			}, 1000);
		},
		validateSingleField : function(e) {
			field = e.target;
			validationCheckVar = LegacyValidation(field);
			if (validationCheckVar === false) {
				if (field.id != null && field.id != undefined) {
					Util.displayErrorMessage(field);
				}
			} else {
				$('#' + field.id).css('border', '1px solid #aaa');
				$("#" + field.id + "Error").text("");
			}
		},
		removeQueryString : function(uri) {
			if (Util.isDefined(uri)) {
				uri = uri.replace(/([&\?]key=val*$|key=val&|[?&]key=val(?=#))/, '');
			}
			return uri;
		}
	};
}();

CookieNames = function() {
	this.cookieNames
	return function() {
		cookieNames = {
			isGuest : 'isGuest',
			msisdn : 'msisdn',
			userName : 'username',
			sessionId : 'sessionId',
			groupId : 'groupId',
			userId : 'userId',
			customerId : 'customerId',
			timeZone : 'timeZone',
			email : 'email',
			utmMode : 'utmMode',
			utmSource : 'utmSource',
			appMgmt : 'appMgmt',
			viewReports : 'viewReports',
			undefined : 'undefined',
			dashboardProgressStatus : 'dashboardProgressStatus',
			GoogleAccountsLocale_session : 'GoogleAccountsLocale_session',
			username : 'username',
			credits : 'credits'
		};
		return cookieNames;
	};
}();

FvApis = function() {
	var apiDataMissing = "API Data Missing";
	return {
		resendEmail : function(eventData) {
			//console.log("resendEmail enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						eventData.preventDefault();
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:resendEmail:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/resendEmail",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('signup', msg, eventData);
					document.getElementById("#resendEmail").disabled = true;
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("resendEmail exit");
		},
		preSignupValidation : function(eventData) {
			//console.log("preSignupValidation enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				alert("API Validation failed:preSignupValidation:ERROR: " + apiDataMissing);
				return false;
			}
			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/preSignupValidation",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('preSignupValidation', msg, eventData);
				},
				error : function(msg) {
					Util.alert_message('#alert_template', "Unexpected error, try later");
				}
			});
		},
		updateUserPerm : function(eventData) {
			//console.log("updateUserPerm enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				alert("API Validation failed:updateUserPerm:ERROR: " + apiDataMissing);
				return false;
			}
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/updateUserAppPermission",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('updateUserPerm', msg, eventData);
				},
				error : function(msg) {
					Util.alert_message('#alert_template', "Unexpected error, try later");
				}
			});
		},
		revokePerm : function(eventData) {
			//console.log("revokePerm enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/revokeUserPermission",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('resetPassword', msg, eventData);
				},
				error : function(msg) {
					Util.alert_message('#alert_template', "Unexpected error, try later");
				}
			});
		},
		resetPassword : function(eventData) {
			//console.log("resetPassword enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "other/resetPassword",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('resetPassword', msg, eventData);
				},
				error : function(msg) {
					Util.alert_message('#alert_template', "Unexpected error, try later");
				}
			});
		},
		getPassword : function(eventData) {// ok-1
			//console.log("getPassword enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getPassword:ERROR: " + apiDataMissing);
				return;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "other/forgotPassword",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getPassword', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if ( typeof elid !== 'undefined') {
						$('#' + elid).text = "Unexpected error, please try later";
					}
				}
			});
		},
		addApp : function(eventData) {
			//console.log("addApp enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:addApp:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "app/addApp",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
						if (!eventData.data.guiData.validate(postData)) {
							return false;
						}
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('addApp', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("addApp exit");
		},
		resendOtp : function(eventData) {
			//console.log("resendOtp enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						eventData.preventDefault();
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:resendOtp:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/resendOtp",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('signup', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("resendOtp exit");
		},
		verifyOtp : function(eventData) {
			//console.log("verifyOtp enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						eventData.preventDefault();
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:signup:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/verifyOtp",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
						if (!eventData.data.guiData.validate(postData)) {
							return false;
						}
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('signup', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("verifyOtp exit");
		},
		addSecUser : function(eventData) {
			//console.log("addSecUser: enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:addSecUser::ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/addSecondaryUser",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
						if (!eventData.data.guiData.validate(postData)) {
							return false;
						}
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('addSecUser', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("signup exit");
		},
		getPrefilledFormDetails : function(eventData) {
			//console.log("getPrefilledFormDetails enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:signupSecUser:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/getPrefilledFormDetails",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getPrefilledFormDetails', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("getPrefilledFormDetails exit");
		},
		signupSecUser : function(eventData) {
			//console.log("signupSecUser enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:signupSecUser:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "session/createSecondaryUser",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('signup', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("signupSecUser exit");
		},
		signup : function(eventData) {
			//console.log("signup enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						eventData.preventDefault();
						return false;
					}
				}
			} else {
				Util.alert_message('#alert_template', "API Validation failed:signup:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/signup",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('signup', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("signup exit");
		},
		startFv : function(eventData) {
			//console.log("startFv enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:login:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/startFoneverifying",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('login', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("startFv exit");
		},
		login : function(eventData) {//ok-2
			//console.log("authenticate enter");
			var buttonId = this.id;
			if (buttonId == 'signup') {
				var fields = null;
				$("#signinForm").each(function() {
					fields = $(this).find(':input');
					//<-- Should return all input elements in that specific form.
				});
				validationCheckVar = Util.validateForm(fields);
				if (!validationCheckVar) {
					return false;
					//window.event.preventDefault();
				}
			}
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:login:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "session/login",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('login', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
			//console.log("authenticate exit");
		},
		logout : function(eventData) {//ok-3
			//console.log("logout enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:logout:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "session/logout",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('logout', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: " + msg);
					Util.alert_message('#alert_template', 'Unexpected error, please try later');

				}
			});
		},
		getAllCallFlows : function(eventData) {//ok-4
			//console.log("getAllCallFlows enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:logout:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "callFlows/getAllCallFlows",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getAllCallFlows', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: " + msg);
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getGuestDetails : function(eventData) {//ok-5
			//console.log("getGuestDetails enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getGuestDetails:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "guest/getGuestDetails",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getGuestDetails', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		updateUserDetails : function(eventData) {//ok-5
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}

			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/updateUserDetails",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
						if (!eventData.data.guiData.validate(postData)) {
							return false;
						}
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('updateuserdetails', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getUserDetails : function(eventData) {//ok-5
			//console.log("getUserDetails enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getUserDetails:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getUserDetails",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getUserDetails', msg, eventData);
				},
				error : function(msg) {
					console.error("AJAX request resulted in error: ");
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.uiCleanup)) {
						eventData.data.guiData.uiCleanup(eventData.data.guiData);
					}
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getVerificationReport : function(eventData) {//ok-6
			//console.log("getVerificationReport API enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if ($.isEmptyObject(postData))
					return;
			} else {
				alert("API Validation failed:getVerificationReport:ERROR: " + apiDataMissing);
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + 'analytics/verifications',
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('verificationReport', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getCountryInfo : function(eventData) {//ok
			//console.log("getCountryInfo API enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("getCountryInfo API Validation failed:logout:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + 'analytics/countryInfo',
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getCountryInfo', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		///
		finReport : function(eventData) {//ok-7
			//console.log("finReport enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:logout:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + 'analytics/financial',
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getFinancialReport', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getAllAppsForUser : function(eventData) {//ok-8
			//console.log("getAllAppsForUser enter");
			$('#spinner').css('display', 'block');
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:logout:ERROR: " + apiDataMissing);
				//eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getAllAppsForUser",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getAllAppsForUser', msg, eventData);
					$('#spinner').css('display', 'none');
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					$('#spinner').css('display', 'none');
				}
			});
		},
		getAllAppsIncludingDeletedForUser : function(eventData) {//ok-8
			//console.log("getAllAppsIncludingDeletedForUser enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:logout:ERROR: " + apiDataMissing);
				//eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getAllAppsIncludingDeletedForUser",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {

					Util.hdlSuccessResponse('getAllAppsIncludingDeletedForUser', msg, eventData);
					if ( typeof msg == 'string') {
						var jsonObj = $.parseJSON(msg);

						FvVariables.getAllAppsIncludingDeletedForUserData = jsonObj;
					} else {
						var jsonObj = msg;
						FvVariables.getAllAppsIncludingDeletedForUserData = jsonObj;
					}
					fetchDefaultChart();
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					$('.se-pre-con').css('display', 'none');
				}
			});
		},

		getDetailsForApps : function(eventData) {//ok-9
			//console.log("getDetailsForApps enter");

			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getDetailsForApps:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}

			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getDetailsForApps",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getDetailsForApps', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					alert("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getLiveAppsForUser : function(eventData) {//ok-10
			//console.log("getLiveAppsForUser enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getLiveAppsForUser:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}
			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getLiveAppsForUser",
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getLiveAppsForUser', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getAllSecondaryUsers : function(eventData) {//ok-11
			//console.log("getAllSecondaryUsers enter");
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getAllSecondaryUsers:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}
			$.ajax({
				type : "GET",
				data : postData,
				url : FvConsts.apiBaseUrl + "user/getAllSecondaryUsers",
				beforeSend : function() {
				},
				success : function(msg) {
					Util.hdlSuccessResponse('getAllSecondaryUsers', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});
		},
		getVerificationDoneSoFar : function(eventData) {
			//console.log("getVerificationDoneSoFar");
			//console.log(eventData);

			var startDate = "";
			var appIds = "";

			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}
			$.ajax({
				type : "POST",
				async : false,
				data : postData,
				url : FvConsts.apiBaseUrl + 'credits/getDetailedWalletStatus',
				success : function(msg) {
					if (msg.code == '200') {
						for (var i = 0; i < msg.data.length; i++) {

							if (msg.data[i]["type"] == "PURCHASED") {

								startDate = msg.data[i]["updatedTime"];
							}
							//appIds += msg.data[i]["type"]+",";
						}
					} else if (msg.code == '504') {
						Util.redirectToIndex();
					}

				},
				error : function(msg) {
					//console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					//Util.hdlSuccessResponse('saveInitialTransaction', msg, eventData);
				}
			});

			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}
			$.ajax({
				type : "GET",
				async : false,
				data : postData,
				url : FvConsts.apiBaseUrl + 'user/getAllAppsIncludingDeletedForUser',
				success : function(msg) {
					if (msg.code == '200') {
						for (var i = 0; i < msg.data.length; i++) {
							appIds += msg.data[i]["appId"] + ",";
						}
					} else if (msg.code == '504') {
						Util.redirectToIndex();
					}
				},
				error : function(msg) {
					//console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					//Util.hdlSuccessResponse('saveInitialTransaction', msg, eventData);
				}
			});

			var appIdPostParam = appIds;
			var customerId = Util.getCookie(CookieNames()['customerId']);
			var repName = 'verifications';
			var tz = Util.getCookie(CookieNames()['timeZone']);
			var groupby = 'App';

			var date = new Date();

			var fdate = date.getFullYear() + "-" + date.getMonth() + "-" + date.getDate();
			var pData = {
				sessionId : sessionId,
				userId : userId,
				reportName : 'CustomerSummaryReport',
				customerId : customerId,
				appIdList : appIdPostParam,
				timeZone : tz,
				countryList : 'ALL',
				startDate : startDate,
				endDate : fdate,
				groupBy : groupby,
				limit : '-1',
				offset : '0'
			};

			$.ajax({
				type : "GET",
				data : pData,
				url : FvConsts.apiBaseUrl + 'analytics/verifications',
				beforeSend : function() {
					if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.beforeSend)) {
						eventData.data.guiData.beforeSend(eventData.data.guiData);
					}
				},
				success : function(msg) {
					var totalVerifications = 0;
					if (msg.headers.responseCode == '200') {
						for (var i = 0; i < msg.body.reportData.length; i++) {
							totalVerifications += msg.body.reportData[i].successfullyVerifications;
						}

					} else if (msg.headers.responseCode == '504') {
						Util.redirectToIndex();
					}
					$('#verificationDoneSoFar').html(totalVerifications);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});

		},
		payamentInitiated : function(eventData) {
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}
			//eventData.preventDefault();
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + 'pay/preProcessPayment',
				success : function(msg) {
					//console.log(eventData);
					Util.hdlSuccessResponse('preProcessPayment', msg, eventData);
				},
				error : function(msg) {
					//console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					//Util.hdlSuccessResponse('saveInitialTransaction', msg, eventData);
				}
			});

		},
		checkTransactionStatus : function(eventData) {
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
			} else {
				alert("API Validation failed:getAllSecondaryUsers:ERROR: " + apiDataMissing);
				eventData.preventDefault();
				return false;
			}
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + 'pay/checkPaymentStatus',
				success : function(msg) {
					//console.log(eventData);
					Util.hdlSuccessResponse('checkPaymentStatus', msg, eventData);
				},
				error : function(msg) {
					//console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});

		},
		saveInitialTransaction : function(eventData) {
			var postData = {};
			var validatedData = Util.isApiReqValid(eventData);
			if (validatedData.isValid) {
				postData = validatedData.postData;
				if (Util.isGuiDataPresent(eventData.data) && Util.isDefined(eventData.data.guiData.validate)) {
					if (!eventData.data.guiData.validate(postData)) {
						//eventData.preventDefault();
						return false;
					}
				}
			} else {
				alert("API Validation failed:resetPassword:ERROR: " + apiDataMissing);
				return false;
			}
			eventData.preventDefault();
			$.ajax({
				type : "POST",
				data : postData,
				url : FvConsts.apiBaseUrl + 'pay/saveInitialTransaction',
				success : function(msg) {
					//console.log(eventData);
					Util.hdlSuccessResponse('saveInitialTransaction', msg, eventData);
				},
				error : function(msg) {
					//console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});

		},
		deleteApp : function(eventData) {
			$.ajax({
				type : "POST",
				data : eventData.data.postData,
				url : FvConsts.apiBaseUrl + 'app/deleteApp',
				beforeSend : function() {
					$('#confirmDelete').removeAttr("appId");
					$('#deleteApp').modal("hide");

				},
				success : function(msg) {
					//console.log(eventData);
					Util.hdlSuccessResponse('deleteApp', msg, eventData);
				},
				error : function(msg) {
					console.error("Unexpected error, please try later");
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				}
			});

		}
	};
}();

FvApiCallbacks = function() {
	return {
		// getLogin API specific callbacks

		resendEmail : {
			getPostData : function() {
				var email = Util.getCookie(CookieNames()['email']);
				return {
					email : email
				};
			},
			success : function(guiData, appData) {
				//console.log("success cb for resendOtp called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					Util.alert_message('#alert_template', "Email sent to " + Util.getCookie(CookieNames()['email']));
					//FvApiCallbacks.resendOtpApi.startCountDown( FvConsts.otpCountDown);
					// $('#resendEmail').attr("id","resendEmailDisable");
					//$('#resendEmail').attr('disabled','true');
					Util.disableLink('resendEmail');
				} else {
					Util.alert_message('#alert_template', "Failed to send Email, try later!");
				}
			}
		},

		getVerReportDoneSoFarApi : {
			getPostData : function() {

				sessionId = Util.getCookie(CookieNames()['sessionId']);
				userId = Util.getCookie(CookieNames()['userId']);
				groupId = Util.getCookie(CookieNames()['groupId']);

				return {
					sessionId : sessionId,
					userId : userId,
					groupId : groupId
				};

			}
		},
		signupApi : {
			proceedSubmit : function(eventData) {
				var postData = FvApiCallbacks.signupApi.getPostData();
				$('#emailConfirm').val(postData.email);
				$('#msisdnConfirm').val('+' + postData.countryCode + postData.msisdn);
				$('#userVerificationModal').modal('show');
				return false;
			},
			validate : function() {
				var postData = FvApiCallbacks.signupApi.getPostData();
				var isValid = true;
				if (postData && postData.msisdn.length != 10) {
					FvVariables.errorMessage = "Invalid mobile number, please check!";
					Util.displayErrorMessage(document.getElementById('mobile'));
					//Util.alert_message('#alert_template', 'Invalid mobile number, please check!');
					document.getElementById('mobile').focus();
					isValid = false;
					return isValid;
				}
				var captchaHash = $('#captcha').realperson('getHash');
				var rpHash = Util.rpHash($('#captcha').val());
				//console.log("captchaHash = " + captchaHash);
				//console.log("rpHash  = " + rpHash);
				if (rpHash != captchaHash) {
					isValid = false;
					FvVariables.errorMessage = "Captcha code doesn't match, please check!";
					Util.displayErrorMessage(document.getElementById('captcha'));
					//Util.alert_message('#alert_template', "Captcha code doesn't match, please check!");
					return false;
				}
				var guiData = {
					callback : function(guiData, appData) {
						if (appData.code == '501') {
							FvVariables.errorMessage = "Email Already Registered, Please Check!";
							Util.displayErrorMessage(document.getElementById('emailId'));
							//Util.alert_message('#alert_template', "Email Already Registered, Please Check!");
						}
						if (appData.code == '502') {
							FvVariables.errorMessage = "Mobile Already Registered, Please Check!";
							Util.displayErrorMessage(document.getElementById('mobile'));
							//msg = "Mobile Already Registered, Please Check!";
							//Util.alert_message('#alert_template', "Mobile Already Registered, Please Check!");
						}
						if (appData.code == '200') {
							FvApiCallbacks.signupApi.proceedSubmit();
						}
					}
				};
				FvApis.preSignupValidation({
					data : {
						guiData : guiData,
						getPostData : function() {
							return {
								email : $('#emailId').val(),
								msisdn : $('#mobile').val()
							};
						}
					}
				});
				return false;
			},
			beforeSend : function(guiData) {
				$('#userVerificationModal').modal('hide');
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');
			},
			getPostData : function() {
				var fullname = $('#name').val();
				var emailid = $('#emailId').val().toLowerCase();
				var company = $('#companyName').val();
				var password = $('#signUp-password').val();
				var cc = $('#ccode option:selected').text().substr(1);
				var isoCC = $('#ccode option:selected').val();
				var msisdn = $('#mobile').val();
				var utmMode = Util.getCookie(CookieNames()['utmMode']);
				var utmSource = Util.getCookie(CookieNames()['utmSource'])
				return {
					name : fullname,
					email : emailid,
					password : password,
					isoCountryCode : isoCC.toUpperCase(),
					company : company,
					countryCode : cc,
					msisdn : msisdn,
					utmMode : utmMode,
					utmSource : utmSource
				};
			},
			success : function(guiData, appData) {
				//console.log("success cb for signup API called with appData: " + JSON.stringify(appData));
				$('#userVerificationModal').modal('hide');
				$('#signupWait').modal('hide');
				if (appData.code == '200') {
					// set the cookies
					/*
					 var cnames = CookieNames();
					 for(var key in cnames) {
					 if( appData.data[0].hasOwnProperty(CookieNames()[key])) {
					 Util.setCookie(CookieNames()[key], appData.data[0][CookieNames()[key]]);
					 }
					 }
					 */
					var guiData = {
						callback : FvApiCallbacks.loginApi.success
					};
					var emailid = $('#emailId').val();
					var password = $('#signUp-password').val();
					FvApis.login({
						data : {
							guiData : guiData,
							getPostData : function() {
								return {
									username : emailid,
									password : password
								};
							}
						}
					});
				} else {
					Util.alert_message('#alert_template', "Failed to register user, try later!");
				}
			},
			loadUserVerificationPage : function(guiData, appData) {
				//console.log("success cb for login API called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					window.location.href = "user-verification-new.html";
				} else {
					Util.alert_message('#alert_template', "Failed signup user, try later!");
				}
			}
		},
		updateUserDetailsApi : {
			getPostData : function() {
				var fullname = $('#fullname').val();
				var emailid = $('#emailID').val();
				var msisdn = $('#mobileNumber').val();
				var companyName = $('#companyName').val();
				var cc = $('#ddlCountry option:selected').val();
				var tz = $('#timeZone option:selected').val();
				var address = $('#uraddress').val();
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				return {
					userName : fullname,
					email : emailid,
					msisdn : msisdn,
					sessionId : sessionId,
					companyName : companyName,
					address : address,
					country : cc,
					timeZone : tz,
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			beforeSend : function() {
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');

			},
			validate : function() {
				if ($('#fullname').val() == '') {
					//alert('Please fill the fields.hhh');
					Util.alert_message('#alert_template', "Please fill the fullname field.");
					$('#signupWait').modal('hide');
					return false;
				}
				return true;
			},
			success : function(guiData, appData) {
				$('#signupWait').modal('hide');
				if (appData.code == '200') {
					$('#signupWait').modal('hide');
					Util.alert_message('#alert_template', "Successfully modified the details.");
				} else if (appData.code == '502') {
					msg = "Mobile Already Registered, Please Check!";
					Util.alert_message('#alert_template', "Mobile Already Registered, Please Check!");
				} else {
					Util.alert_message('#alert_template', "Operation Failed.");
				}
			}
		},
		updateUserPermApi : {
			beforeSend : function() {
				$('#EditModal').modal('hide');
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');
			},
			validate : function() {
				var apps = $('#appnamemanageapp option:selected');
				if (apps.length == 0) {
					$('#EditModal').modal('hide');
					Util.alert_message('#alert_template', 'Please select one of app also.');
					$('#signupWait').modal('hide');
					//$('#EditModal').modal('show');
					return false;
				} else if (!(editappmanagement.checked || editviewreport.checked  )) {
					$('#EditModal').modal('hide');
					Util.alert_message('#alert_template', 'Please select one of permissions.');
					return false;
				}
				return true;
			},
			success : function(guiData, appData) {
				if (appData.code == '200') {
					$('#signupWait').modal('hide');
					Util.alert_message('#alert_template', "Successfully modified the permission.");
					FvApis.getAllSecondaryUsers({
						data : {
							guiData : {
								elid : 'dvSecUser',
								callback : FvApiCallbacks.getAllSecUsersApi.updateSecUserDetails
							},
							getPostData : FvApiCallbacks.getAllSecUsersApi.getPostData
						}
					});
				} else {
					Util.alert_message('#alert_template', "Operation Failed.");
				}
			}
		},
		revokePermApi : {
			success : function(guiData, appData) {
				//console.log("success cb for revokePermApi called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					Util.alert_message('#alert_template', "Successfully revoked the permission.");
					//location.reload();
					FvApis.getAllSecondaryUsers({
						data : {
							guiData : {
								elid : 'dvSecUser',
								callback : FvApiCallbacks.getAllSecUsersApi.updateSecUserDetails
							},
							getPostData : FvApiCallbacks.getAllSecUsersApi.getPostData
						}
					});

				} else {
					Util.alert_message('#alert_template', "Operation Failed.");
				}
			}
		},
		resendOtpApi : {
			hideCountDown : function() {
				$('#countDown').hide();
			},
			showCountDown : function() {
				$('#countDown').show();
			},
			startCountDown : function(sec) {
				//console.log("countdown enter");
				var timer = setInterval(function() {
					var mi = Math.floor(sec / 60);
					if (mi.toString().length == 1)
						mi = '0' + mi
					var ss = sec % 60;
					if (ss.toString().length == 1)
						ss = '0' + ss
					$('#countDown').text(mi + ':' + ss);
					sec--;
					if (sec == -1) {
						clearInterval(timer);
						$('#verifyOtp').attr("disabled", true);
						//Util.enableLink('resendOtp', {guiData: {callback: FvApiCallbacks.resendOtpApi.success}, getPostData: FvApiCallbacks.resendOtpApi.getPostData }, FvApis.resendOtp);
					}
				}, 1000);
				//console.log("countdown exit");
			},
			getPostData : function() {
				var msisdn = Util.getCookie(CookieNames()['msisdn']);
				return {
					msisdn : msisdn
				};
			},
			success : function(guiData, appData) {
				//console.log("success cb for resendOtp called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					Util.alert_message('#alert_template', "OTP sent to " + Util.getCookie(CookieNames()['msisdn']));
					FvApiCallbacks.resendOtpApi.startCountDown(FvConsts.otpCountDown);
					$('#verifyOtp').removeAttr("disabled");
					Util.disableLink('resendOtp');
				} else {
					Util.alert_message('#alert_template', "Failed to send OTP, try later!");
				}
			}
		},
		verifyOtpApi : {
			getPostData : function() {
				var msisdn = Util.getCookie(CookieNames()['msisdn']);
				var otp = $('#digit1').val() + $('#digit2').val() + $('#digit3').val() + $('#digit4').val();
				return {
					msisdn : msisdn,
					otp : otp
				};
			},
			validate : function() {
				var otp = $('#digit1').val() + $('#digit2').val() + $('#digit3').val() + $('#digit4').val();
				if (otp == '') {
					Util.alert_message('#alert_template', 'Please enter the otp.');
					return false;
				}
				return true;
			},
			success : function(guiData, appData) {
				//console.log("success cb for verifyOtp called with appData: " + JSON.stringify(appData));
				//alert("code :" +appData.code+" msg : "+ appData.errorMsg);
				if (appData.code == '200') {
					//console.log("OTP Verified successfully");
					Util.alert_message('#alert_template', FvAlerts["Success"]);
					$("input[type=text]").val("");
					$('#resendOtp').attr("disabled", true);
					$('#resendOtp').on('click', function(e) {
						return false;
					});
				} else if (appData.code == '513') {
					Util.alert_message('#alert_template', FvAlerts[appData.status])
				} else if (appData.code == '514') {
					Util.alert_message('#alert_template', FvAlerts[appData.status])
				} else if (appData.code == '515') {
					Util.alert_message('#alert_template', FvAlerts[appData.status])
				} else {
					Util.alert_message('#alert_template', FvAlerts[appData.errorMsg]);
				}
				$("input[type=text]").val("");
			}
		},
		startFvApi : {
			beforeSend : function(guiData) {
				//console.log("beforeSend for loginAPI called");
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');
				//console.log("beforeSend for loginAPI called");
			}
		},

		addAppApi : {
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var appName = $('#appname').val().toLowerCase();
				var callFlowId = $('#callflow').val().toLowerCase();
				var appDescription = $('#appDescription').val().toLowerCase();
				var appURL = $('#webUrl').val().toLowerCase();
				return {
					userId : userId,
					appName : appName,
					sessionId : sessionId,
					callFlowId : callFlowId,
					appDescription : appDescription,
					appURL : appURL
				};
			},
			validate : function() {
				var appName = $('#appname').val().toLowerCase();
				var appDescription = $('#appDescription').val().toLowerCase();
				if ($('#appname').val() == '') {
					Util.alert_message('#alert_template', 'Please fill the App Name.');
					return false;
				} else if ($('#appDescription').val() == '') {
					Util.alert_message('#alert_template', 'Please fill the App Description.');
					return false;
				}
				return true;
			},
			success : function(guiData, appData) {
				//console.log("success cb for addApp called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					Util.alert_message('#alert_template', 'Successfully added the application.');
					FvApiCallbacks.addAppApi.uiCleanup();
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', 'App Name already exists, Please use a different name!');
				}
			},
			uiCleanup : function(guiData) {
				//console.log("uiCleanup for addApp called");
				//console.log("updating the status");
				$('#appname').val('');
				$('#callflow option:first').attr("selected", false);
				$('#appDescription').val('');
				$('#webUrl').val('');
			},
		},
		getPrefilledFormDetailsApi : {
			success : function(guiData, appData) {
				if (appData.code == '200') {
					$('#emailid').val(appData.data[0].email);
					$('#addCompany').val(appData.data[0].company);
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', FvAlerts[appData.errorMsg]);
				}
			}
		},
		signupSecUserApi : {
			getPostData : function() {
				var name = $('#name').val();
				var email = $('#emailId').val();
				var password = $('#signUp-password').val();
				var cc = $('#ccode option:selected').text().substr(1);
				var company = $('#companyName').val();
				var msisdn = $('#mobile').val();
				var serviceCode = Util.getUrlParam('serviceCode');
				return {
					name : name,
					serviceCode : serviceCode,
					email : email,
					password : password,
					company : company,
					countryCode : cc,
					msisdn : msisdn
				};
			},
			beforeSend : function() {
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');
			},
			validate : function(postData) {
				var isValid = true;
				if (postData && postData.msisdn.length != 0 && postData.msisdn.length != 10) {
					Util.alert_message('#alert_template', 'Invalid mobile number, please check!');
					return false;
				}
				var captchaHash = $('#captcha').realperson('getHash');
				var rpHash = Util.rpHash($('#captcha').val());
				//console.log("captchaHash = " + captchaHash);
				//console.log("rpHash  = " + rpHash);
				if (rpHash != captchaHash) {
					isValid = false;
					Util.alert_message('#alert_template', "Captcha code doesn't match, please check!");
					return isValid;
				}
				return isValid;
			},
			success : function(guiData, appData) {
				$('#signupWait').modal('hide');
				$('#name').val('');
				email = $('#emailId').val('');
				password = $('#password').val('');
				company = $('#addCompany').val('');
				//console.log("success cb for signupSecUser called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					$('#addSecEmail').val('');
					Util.alert_message('#alert_template', 'Successfully added secondary user, proceed to login!');
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', appData.errorMsg);
				}
			}
		},
		addSecUserApi : {
			beforeSend : function() {
				$('#signupWait').modal({
					keyboard : false
				});
				$('#signupWait').modal('show');

			},
			validate : function() {
				var apps = $('#appnameuser option:selected');
				var appManagement = $('#appmanagement').is(":checked");
				var appReports = $('#viewreport').is(":checked");
				if (apps.length == 0) {
					Util.alert_message('#alert_template', 'Please select one of apps.');
					return false;
				} else if (!(appmanagement.checked || viewreport.checked || appmanagement.checked || viewreport.checked )) {
					Util.alert_message('#alert_template', 'Please select one of permissions.');
					//alert("Please select an option.");
					return false;
				}
				return true;
			},
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var email = $('#addSecEmail').val();
				var appManagement = $('#appmanagement').is(":checked");
				var appReports = $('#viewreport').is(":checked");
				var apps = $('#appnameuser option:selected');
				var appIdList = [];
				$(apps).each(function(index, app) {
					appIdList.push($(apps[index]).val());
					//Util.alert_message('#alert_template', 'Please select one of app permission also.');
					//return false;
				});
				var postObj = {
					sessionId : sessionId,
					userId : userId,
					email : email,
					appManagement : appManagement,
					appReports : appReports,
					appIds : appIdList.join(',')
				};
				return postObj;
			},
			success : function(guiData, appData) {
				$('#signupWait').modal('hide');
				//console.log("success cb for addSecUserApp called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					$('#addSecEmail').val('');
					document.getElementById("viewreport").checked = false;
					document.getElementById("appmanagement").checked = false;
					$("#appnameuser option:selected").removeAttr("selected");
					Util.alert_message('#alert_template', 'Successfully added secondary user.');
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', FvAlerts[appData.errorMsg]);
					$('#addSecEmail').val('');
					document.getElementById("viewreport").checked = false;
					document.getElementById("appmanagement").checked = false;
					$("#appnameuser option:selected").prop("selected", "false");
				}
			}
		},
		loginApi : {
			getPostData : function() {
				var username = $('#emailid').val().toLowerCase();
				var password = $('#password').val();
				if (username.indexOf("@") >= 0 || username == "" || password == "") {
					return {
						username : username,
						password : password
					};
				} else {
					return {
						number : username,
						password : password
					};
				}

			},
			uiCleanup : function(guiData) {
				//console.log("uiCleanup for loginAPI called");
				if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
					//console.log("updating the status");
					$("#" + guiData.elid).css('color', '');
					$("#" + guiData.elid).html("&nbsp;");
				}
			},
			beforeSend : function(guiData) {
				//console.log("beforeSend for loginAPI called");
				if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
					//console.log("updating the status");
					$("#" + guiData.elid).css('color', '');
					$("#" + guiData.elid).text("Processing...");
				}
			},
			success : function(guiData, appData) {
				//console.log("success cb for loginAPI called with appData: " + JSON.stringify(appData));

				if (appData.code == '200') {
					// set the cookies
					var cnames = CookieNames();
					for (var key in cnames) {
						if (appData.data[0].hasOwnProperty(CookieNames()[key])) {
							Util.setCookie(CookieNames()[key], appData.data[0][CookieNames()[key]]);
						}
					}
					//console.log("Fetch the user details");
					if (appData.data[0].guest == false) {
						Util.setCookie(CookieNames()['isGuest'], 'false');
						FvApis.getUserDetails({
							data : {
								guiData : {
									elid : 'status',
									uiCleanup : FvApiCallbacks.loginApi.uiCleanup,
									callback : function(guiData, appData) {
										//console.log("inside the callback for getUserDetails");
										if (appData.code == '200') {
											Util.setCookie(CookieNames()['customerId'], appData.data[0][CookieNames()['customerId']]);
											Util.setCookie(CookieNames()['timeZone'], appData.data[0][CookieNames()['timeZone']]);
											window.location.href = "dashboard.html";
										} else {
											if (Util.isDefined(guiData) && Util.isDefined(guiData.uiCleanup)) {
												guiData.uiCleanup(guiData);
											}
											Util.alert_message('#alert_template', 'Unexpected error for getUserDetails API, try later');
										}
									}
								},
								getPostData : function() {
									return {
										sessionId : Util.getCookie(CookieNames()['sessionId']),
										userId : Util.getCookie(CookieNames()['userId'])
									};
								}
							}
						});
					} else {
						Util.setCookie(CookieNames()['isGuest'], 'true');
						window.location.href = "user-verification.html";
					}
				} else {
					if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
						$("#" + guiData.elid).css('color', 'red');
						$("#" + guiData.elid).text(FvAlerts[appData.errorMsg]);
					}
				}
			}
		},
		logoutApi : {
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				return {
					sessionId : sessionId,
					userId : userId
				};
			},
			beforeSend : function() {
			},
			success : function(guiData, appData) {
				//console.log("success cb for logoutAPI called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					// del. the cookies
					var cnames = CookieNames();
					for (var key in cnames) {
						//console.log("deleting cookie >" + key + "<");
						if (cnames.hasOwnProperty(key)) {
							Util.deleteCookie(key);
						}
					}
					window.location.href = "index.html";
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					alert('Unexpected error, try later');
				}
			}
		},
		getCallFlowsApi : {
			getPostData : function() {
				return {};
			},
			beforeSend : function(guiData) {
				//console.log("beforeSend for getCallFlowsApi called");
				if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
					var elid = guiData['elid'];
					if (Util.isDefined(elid)) {
						elid = '#' + elid;
						$(elid).find('option').remove();
						//console.log("Loading...");
						$(elid).append($('<option>', {
							text : "Loading..."
						}));
					}
				}
			},
			success : function(guiData, callFlowData) {
				//console.log("updateCallFlowList received callFlow data " + JSON.stringify(callFlowData));
				if (callFlowData.code == '200') {
					//console.log("updateCallFlowList: got success response");
					if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
						//console.log("updateCallFlowList: found dom el to update");
						var el = '#' + guiData.elid;
						$(el).find('option').remove();
						$(el).append('<option class="placeholder_color" value="" disabled selected>Select</option>');
						$.each(callFlowData.data, function(i, item) {
							$(el).append($('<option>', {
								value : item.callFlowId,
								title : item.description,
								text : item.name,
								style : "background-image:url(images/edit-icon.png);",
								class : 'otherSelectOptions'
							}));

						});
					}
				} else {
					Util.alert_message('#alert_template', 'Unexpected error for getAllCallFlows API, try later');
				}
			},
		},
		resetPasswdApi : {
			getPostData : function() {
				var newPassword = $('#newpassword').val();
				var serviceCode = Util.getUrlParam('serviceCode');
				return {
					newPassword : newPassword,
					serviceCode : serviceCode
				};
			},
			validate : function() {
				var isValid = true;
				if ($('#newpassword').val() != $('#confirmnewpassword').val()) {
					isValid = false;
					Util.alert_message('#alert_template', "Passwords don't match, try again!");
				}
				return isValid;
			},
			beforeSend : function(guiData) {
				var cbname = 'getPasswordApi';
				//console.log("beforeSend for " + cbname + " called");
				if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
					if ( typeof elid !== 'undefined') {
						$('#' + elid).html('Processing...');
					}
				} else {
					//console.log("beforeSend for " + cbname + ", no dom to update");
				}
			},
			success : function(guiData, appData) {
				var cbname = 'resetPasswordApi';
				//console.log("success for " + cbname + " called");
				if (appData.code == '200') {
					Util.alert_message('#alert_template', 'Password reset successfully, proceed to login!');
					$('#newpassword').val('');
					$('#confirmnewpassword').val('');
					window.location.href = 'signin.html';
				} else if (appData.code) {
					Util.alert_message('#alert_template', appData.errorMsg);
				} else {
					Util.alert_message('#alert_template', 'Unexpected error, try later');
				}
			}
		},
		getPasswordApi : {
			getPostData : function() {
				return {
					email : $('#email').val()
				};
			},
			beforeSend : function(guiData) {
				var cbname = 'getPasswordApi';
				//console.log("beforeSend for " + cbname + " called");
				if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
					var elid = guiData.elid;
					if ( typeof elid !== 'undefined') {
						$('#' + elid).html('Processing...');
					}
				} else {
					//console.log("beforeSend for " + cbname + ", no dom to update");
				}
			},
			success : function(guiData, appData) {
				var cbname = 'getPasswordApi';
				//console.log("success for " + cbname + " called");
				if (appData.code == '200') {
					// hide the text + button
					if (Util.isDefined(guiData) && Util.isDefined(guiData.toHide)) {
						for (var key in guiData.toHide) {
							//console.log(cbname + " hiding the elements with id " + guiData.toHide[key]);
							$('#' + guiData.toHide[key]).hide();
						}
					}
					if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
						var elid = guiData.elid;
						$('#' + elid).html('<h2>Password Reset Request.</h2><br/><h4>We have emailed you the link to regenerate password. Please check your email and click on reset password link.</h4>');
					} else {
						Util.alert_message('#alert_template', 'Check your mail and follow the instructions');
						//console.log(cbname + " no dom el to update in success cb");
					}

				} else if (appData.code) {
					console.info(cbname + " error code returned json response");
					$('#lbGetPasswdStatus').html(FvAlerts[appData.errorMsg]);
				} else {
					Util.alert_message('#alert_template', 'Unexpected error, try later');
				}
			}
		},
		getGuestDetailsApi : {
			getPostData : function() {
				return {
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			success : function(guiData, appData) {
				var cbname = 'getGuestDetailsApi';
				//console.log("success for " + cbname + " called");
				if (appData.code == '200') {
					console.info(cbname + " resulted in successful response");
					if (appData.data[0].hasOwnProperty(CookieNames()['msisdn'])) {
						Util.setCookie(CookieNames()['msisdn'], appData.data[0][CookieNames()['msisdn']]);
					}
					if (appData.data[0].hasOwnProperty(CookieNames()['email'])) {
						Util.setCookie(CookieNames()['email'], appData.data[0][CookieNames()['email']]);
					}
					var userDetails = appData.data[0];
					var isVerified = true;
					if (userDetails.msisdnVerified == true) {
						$('#msisdnVerStatus').html('<p><img src="images/check-tick.png" class="paddright" />Mobile number successfully verified</p>');
						Util.disableLink('resendOtp');
						//$('#resendOtp').on('click', function(e){ return false;});
						//$('#resendOtp').css({cursor: "default"});
						$('#verifyOtp').attr("disabled", true);
						FvApiCallbacks.resendOtpApi.hideCountDown();
					} else {
						isVerified = false;
						$('#msisdnVerStatus').html('<p><img src="images/icon-alert.png" class="paddright" />Mobile number not verified yet</p>');
						FvApiCallbacks.resendOtpApi.showCountDown();
					}
					if (userDetails.emailVerified == true) {
						$('#emailVerStatus').html('<p><img src="images/check-tick.png" class="paddright" />Email successfully verified</p>');
					} else {
						$('#emailVerStatus').html('<p><img src="images/icon-alert.png" class="paddright" />Email not verified yet</p>');
						isVerified = false;
					}

					if (!isVerified) {
						setTimeout(getGuestDetailsWrap, FvConsts.getGuestDetailsTO);
						$('#foneverifying').attr("disabled", true);
					} else {//if(userDetails.guest == "false") {
						$('#foneverifying').removeAttr("disabled");
					}

				} else if (appData.code == '504') {//session invalid
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', 'Unexpected error for getGuestDetails API, try later');
				}
			}
		},
		getUserDetailsApi : {
			getPostData : function() {
				return {
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			beforeSend : function(guiData) {
			},
			success : function(guiData, appData) {
				var cbname = 'getUserDetailsApi';
				//console.log("success for " + cbname + " called");
				if (appData.code == '200') {
					console.info(cbname + " resulted in successful response");
					var userDetails = appData.data[0];
					$('#fullname').val(userDetails.name);
					$('#emailID').val(userDetails.email);
					$('#mobileNumber').val(userDetails.msisdn);
					var groupId = Util.getCookie(CookieNames()['groupId']);
					if (groupId == '2') {
						$('#mobileNumber').attr("disabled", true);
					} else {
						$('#mobileNumber').removeAttr("disabled", false);
					}
					$('#companyName').val(userDetails.companyName);
					$('#uraddress').val(userDetails.address);
					$('#whenjoined') != undefined ? $('#whenjoined').datepicker('setDate', new Date(userDetails.createdTime)) : '';
					$("select#ddlCountry option").each(function() {
						this.selected = (this.value == userDetails.country);
					});
					//$("#timeZone").val(userDetails.timeZone).attr("selected", "selected");
					$("select#timeZone option").each(function() {
						this.selected = (this.value == userDetails.timeZone);
					});
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', 'Unexpected error for getUserDetails API, try later');
				}
			}
		},
		getAppDetailsApi : {
			getPostData : function() {
				var apps = $('#appnamemanageapp option:selected');
				var appIdList = [];
				$(apps).each(function(index, app) {
					appIdList.push($(apps[index]).val());
				});
				//console.log("getAppDetailsApi app id lst as " + appIdList.join(','));
				return {
					appIds : appIdList.join(','),
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			updateAppDetailsTable : function(guiData, appData) {
				//console.log("updateAppDetailsTable received app data: " + JSON.stringify(appData));
				sessionStorage.setItem('guiData', guiData);
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("tableid")) {
						var el = '#' + guiData['tableid'];
						$(el).css('min-height', '100');
						var dTable = $(el).dataTable({
							"pageLength" : 10,
							"retrieve" : true
						});
						dTable.fnClearTable();
						var data = appData.data;
						for (var i = 0; i < data.length; i++) {
							var appUrl = Util.isDefined(data[i]['appUrl']) ? data[i]['appUrl'] : '-';
							var appSecret = Util.isDefined(data[i]['appSecret']) ? data[i]['appSecret'] : '-';
							var action = "";
							if (data[i]['actions']['update'] == true) {
								//action += '<button appId="'+data[i]['appId']+'" id="edit" class="btn btn-sm tbl-btn-view" data-toggle="modal" data-target="#editApps"'+
								//'onclick="datatableedit(this)"> Edit </button>';
								action += '<span class="glyphicon glyphicon-edit" aria-hidden="true" appId="' + data[i]['appId'] + '" id="edit" class="btn btn-sm' + 'tbl-btn-view" data-toggle="modal" data-target="#editApps"' + 'onclick="datatableedit(this)"></span>&nbsp;&nbsp;';

							}
							if (data[i]['actions']['delete'] == true) {
								action += '<span class="glyphicon glyphicon-trash delete" appId="' + data[i]['appId'] + '" id="delete_' + data[i]['appId'] + '" class="btn btn-sm tbl-btn-view"></span>';
								;
							}
							dTable.fnAddData([data[i]["appId"], data[i]["appName"], data[i]["appDesc"], appSecret, appUrl, data[i]['callFlowName'], action]);
						}
						$(".delete").on('click', FvApiCallbacks.deleteApp.showConfirmPopup);
						//$("#confirmDelete").on('click',FvApiCallbacks.deleteApp.execute);
					}
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				} else {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("tableid")) {
						var el = '#' + guiData['tableid'];
						$(el).css('min-height', '100');
						var dTable = $(el).dataTable({
							"pageLength" : 10,
							"retrieve" : true
						});
						dTable.fnClearTable();
					}
				}
			}
		},
		getCountryInfoApi : {
			getPostData : function() {
				var apps = $('#appnamemanageapp option:selected');
				var appIdList = [];
				$(apps).each(function(index, app) {
					appIdList.push($(apps[index]).val());
				});
				//console.log("getAppDetailsApi app id lst as " + appIdList.join(','));
				return {
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId']),
					appIdList : appIdList.join(','),
					customerId : Util.getCookie(CookieNames()['customerId']),
					limit : '1',
					offset : '0',
					reportName : 'CustomerCountryList'
				};
			},
			success : function(guiData, appData) {
				//console.log("getCountryInfoApi: " + JSON.stringify(appData));
				//console.log("getCountryInfoApi: received country Info data " + JSON.stringify(appData));
				if (appData.headers.responseCode == '200') {
					//console.log("getCountryInfoApi: got success response");
					if (Util.isDefined(guiData) && Util.isDefined(guiData.elid)) {
						//console.log("getCountryInfoApi: found dom el to update");
						var el = '#' + guiData.elid;
						$(el).find('option').remove();
						$(el).show();
						$.each(appData.body.reportData, function(i, item) {
							$.each(item.countryInfo, function(j, cinfo) {
								$(el).append($('<option>', {
									value : cinfo.isoCC,
									text : cinfo.countryName
								}));
							});
						});
					}
				} else if (appData.headers.responseCode == '504') {
					Util.redirectToIndex();
				}
			}
		},
		getVerReportApi : {
			getTodayPostData : function() {
				var appIds = "";
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var postData = {};
				postData['sessionId'] = sessionId;
				postData['userId'] = userId;
				$.ajax({
					type : "GET",
					data : postData,
					async : false,
					url : FvConsts.apiBaseUrl + "user/getAllAppsIncludingDeletedForUser",
					success : function(msg) {
						if (msg.code == '200') {
							for (var i = 0; i < msg.data.length; i++) {
								appIds += msg.data[i]["appId"] + ",";
							}
						} else if (msg.code == '504') {
							Util.redirectToIndex();
						}
					},
					error : function(msg) {
						console.error("Unexpected error, please try later");
						Util.alert_message('#alert_template', 'Unexpected error, please try later');
					}
				});

				var appIdPostParam = appIds;
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var repName = 'verifications';
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var groupby = 'App';
				var fdate = $.datepicker.formatDate('yy-mm-dd', new Date());
				var pData = {
					sessionId : sessionId,
					userId : userId,
					reportName : 'CustomerSummaryReport',
					customerId : customerId,
					appIdList : appIdPostParam,
					timeZone : tz,
					countryList : 'ALL',
					startDate : fdate,
					endDate : fdate,
					groupBy : groupby,
					limit : '-1',
					offset : '0'
				};
				return pData;

			},
			getWeekPostData : function() {
				var appIds = "";
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var postData = {};
				postData['sessionId'] = sessionId;
				postData['userId'] = userId;
				$.ajax({
					type : "GET",
					data : postData,
					async : false,
					url : FvConsts.apiBaseUrl + "user/getAllAppsIncludingDeletedForUser",
					success : function(msg) {
						if (msg.code == '200') {
							for (var i = 0; i < msg.data.length; i++) {
								appIds += msg.data[i]["appId"] + ",";
							}
						} else if (msg.code == '504') {
							Util.redirectToIndex();
						}
					},
					error : function(msg) {
						console.error("Unexpected error, please try later");
						Util.alert_message('#alert_template', 'Unexpected error, please try later');
					}
				});

				//postData['appIds']=appIds;
				var appIdPostParam = appIds;
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var repName = 'verifications';
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var groupby = 'App';
				var date = new Date();
				date.setDate(date.getDate() - 7);
				var fdate = $.datepicker.formatDate('yy-mm-dd', date);
				var edate = $.datepicker.formatDate('yy-mm-dd', new Date());
				var pData = {
					sessionId : sessionId,
					userId : userId,
					reportName : 'CustomerSummaryReport',
					customerId : customerId,
					appIdList : appIdPostParam,
					timeZone : tz,
					countryList : 'ALL',
					startDate : fdate,
					endDate : edate,
					groupBy : groupby,
					limit : '-1',
					offset : '0'
				};
				return pData;
			},
			getMonthPostData : function() {
				var appIds = "";
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var postData = {};
				postData['sessionId'] = sessionId;
				postData['userId'] = userId;
				$.ajax({
					type : "GET",
					data : postData,
					async : false,
					url : FvConsts.apiBaseUrl + "user/getAllAppsIncludingDeletedForUser",
					success : function(msg) {
						if (msg.code == '200') {
							for (var i = 0; i < msg.data.length; i++) {
								appIds += msg.data[i]["appId"] + ",";
							}
						} else if (msg.code == '504') {
							Util.redirectToIndex();
						}
					},
					error : function(msg) {
						console.error("Unexpected error, please try later");
						Util.alert_message('#alert_template', 'Unexpected error, please try later');
					}
				});
				var appIdPostParam = appIds;
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var repName = 'verifications';
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var groupby = 'App';
				var date = new Date();
				date.setDate(date.getDate() - 30);
				var fdate = $.datepicker.formatDate('yy-mm-dd', date);
				var edate = $.datepicker.formatDate('yy-mm-dd', new Date());
				var pData = {
					sessionId : sessionId,
					userId : userId,
					reportName : 'CustomerSummaryReport',
					customerId : customerId,
					appIdList : appIdPostParam,
					timeZone : tz,
					countryList : 'ALL',
					startDate : fdate,
					endDate : edate,
					groupBy : groupby,
					limit : '-1',
					offset : '0'
				};
				return pData;
			},
			getPostData : function() {
				var fdate = $('#fromdate').val();
				if (!fdate) {
					alert('Please select from date.');
					return;
				}
				var tdate = $('#todate').val();
				if (!tdate) {
					alert('Please select to date');
					return;
				}
				var groupby = $('#groupby').val();
				if (groupby == 'Group by') {
					alert('Please select appropriate group by field.');
					return;
				}
				var ccList = $('#vrcountry option:selected');
				var ccListpostparam = "";
				if (ccList) {
					for (var i = 0; i < ccList.length; i++) {
						ccListpostparam += ccList[i].value + ",";
					}
				} else {
					alert("Please select a country");
					return;
				}
				var appSelectedList = $('#appnamemanageapp option:selected');
				var appSelectedListpostparam = "";
				if (appSelectedList) {
					for (var i = 0; i < appSelectedList.length; i++) {
						appSelectedListpostparam += appSelectedList[i].value + ",";
					}
				} else {
					alert("Please select a country");
					return;
				}
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var repName = 'verifications';
				return {
					sessionId : sessionId,
					userId : userId,
					reportName : 'verificationReport',
					customerId : customerId,
					appIdList : appSelectedListpostparam,
					timeZone : tz,
					countryList : ccListpostparam,
					startDate : fdate,
					endDate : tdate,
					groupBy : groupby,
					limit : '-1',
					offset : '0'
				};
			},
			success : function(guiData, report) {
				var verificationReq = [];
				//console.log("updateVerRepTable Obtained summary report : " + JSON.stringify(report));
				if (Util.isDefined(guiData) && guiData.hasOwnProperty("tableid")) {
					var el = '#' + guiData['tableid'];
					$(el).css('min-height', '100');
					var dTable = $(el).dataTable({
						"pageLength" : 10,
						"retrieve" : true
					});
				} else {
					alert('Error: verificationReport dom el id missing');
					return;
				}
				if (report.headers.responseCode == '200') {
					dTable.fnClearTable();
					var data = report.body.reportData;
					for (var i = 0; i < data.length; i++) {
						verificationReq.push(data[i]["verificationsRequest"]);
						dTable.fnAddData([data[i]["groupFieldName"], data[i]["verificationsRequest"], data[i]["successfullyVerifications"], data[i]["successPercent"]]);
					}
					//console.log("updating the chart");
					var catData = [];
					var seriesData = [];
					var successData = [];
					var rptLen = data.length;
					for (var i = 0; i < rptLen; ++i) {
						catData.push(data[i].groupFieldName);
						successData.push(data[i].successPercent);
						seriesData.push({
							name : data[i].groupFieldName,
							y : data[i].successPercent
						});
					}
					//successData[0] = '0';
					//console.log("cat data " + catData);
					//console.log("cat data1 " + successData);
					$('#container').highcharts({
						chart : {
							zoomType : 'xy'
						},
						title : {
							text : ''
						},
						subtitle : {
							text : ''
						},
						xAxis : [{
							categories : catData,
							crosshair : true
						}],
						yAxis : [{// Primary yAxis
							labels : {
								format : '{value}',
								style : {
									color : Highcharts.getOptions().colors[1]
								}
							},
							title : {
								text : 'Verification Request',
								style : {
									color : Highcharts.getOptions().colors[1]
								}
							},
							min : 0
						}, {// Secondary yAxis
							title : {
								text : 'Success',
								style : {
									color : Highcharts.getOptions().colors[0]
								}
							},
							labels : {
								format : '{value}%',
								style : {
									color : Highcharts.getOptions().colors[0]
								}
							},
							opposite : true,
							min : 0,
							max : 100

						}],
						tooltip : {
							shared : true
						},
						legend : {
							layout : 'horizontal',
							align : 'left',
							x : 20,
							verticalAlign : 'top',
							y : 0,
							floating : false,
							backgroundColor : (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
						},
						series : [{
							name : 'verificationRequest',
							type : 'column',
							data : verificationReq,
							tooltip : {
								valueSuffix : ''
							}
						}, {
							name : 'Success',
							type : 'line',
							yAxis : 1,
							scaleStartValue : 0,
							scaleStepWidth : 50,
							data : successData,
							tooltip : {
								valueSuffix : '%'
							}
						}]
					});
				} else if (report.headers.responseCode == 404) {
					report.headers.responseMessage = FvAlerts.VERIFICATION_REPORT_NOTFOUND;
					dTable.fnClearTable();
					emptyHighChart(report);
					var data = [];
					for (var i = 0; i < data.length; i++) {
						dTable.fnAddData([data[i]["groupFieldName"], data[i]["verificationsRequest"], data[i]["successfullyVerifications"], data[i]["successPercent"]]);
					}
				} else if (report.headers.responseCode == 406) {
					if (report.headers.responseMessage == "appIdList should not be blank") {
						report.headers.responseMessage = FvAlerts.VERIFICATION_REPORT_APPID_NULL;
					}
					dTable.fnClearTable();
					emptyHighChart(report);
					var data = [];
					for (var i = 0; i < data.length; i++) {
						dTable.fnAddData([data[i]["groupFieldName"], data[i]["verificationsRequest"], data[i]["successfullyVerifications"], data[i]["successPercent"]]);
					}
				} else {
					//console.log("Error in the json response for verification report");
					dTable.fnClearTable();
					emptyHighChart(report);
					var data = [];
					for (var i = 0; i < data.length; i++) {
						dTable.fnAddData([data[i]["groupFieldName"], data[i]["verificationsRequest"], data[i]["successfullyVerifications"], data[i]["successPercent"]]);
					}
				}
			},
			updateAnalyticsSumm : function(guiData, appData) {
				//console.log("updateAnalyticsSumm Obtained summary report : " + JSON.stringify(appData));
				var el = '#' + guiData['tableid'];
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				if (Util.isDefined(guiData.lblId)) {
					if (guiData.type == "Today")
						$("#" + guiData.lblId).text("Today's Reports");
					else if (guiData.type == "Weekly") {
						$("#" + guiData.lblId).text("Weekly Reports");
					} else if (guiData.type == "Monthly") {
						$("#" + guiData.lblId).text("Monthly Reports");
					}
				}
				if (appData.headers.responseCode == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("tableid")) {
						dTable.fnClearTable();
						var report = [];
						if (appData.body)
							report = appData.body.reportData;
						for (var i = 0; i < report.length; i++) {
							dTable.fnAddData([report[i]["groupFieldName"], report[i]["verificationsRequest"], report[i]["successfullyVerifications"], report[i]["successPercent"]]);
						}
					}
				} else if (appData.headers.responseCode == '504') {
					Util.redirectToIndex();
				} else if (appData.headers.responseCode == '404') {
					dTable.fnClearTable();
				}
			}
		},
		finReportApi : {
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var repName = 'verifications';
				//var tz = 'Asia/Kolkata';
				return {
					sessionId : sessionId,
					userId : userId,
					customerId : customerId,
					reportName : repName,
					timeZone : tz,
					limit : -1,
					offset : 0
				};
			},
			updateFinReport : function(guiData, appData) {
				//console.log("updateFinReport: Obtained financial report : " + JSON.stringify(appData));
				if (appData.headers.responseCode == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("tableid")) {
						var el = '#' + guiData.tableid;
						$(el).css('min-height', '100');
						var dTable = $(el).dataTable({
							"pageLength" : 10,
							"retrieve" : true
						});
						dTable.fnClearTable();
						var report = appData.body.reportData;
						for (var i = 0; i < report.length; i++) {
							dTable.fnAddData([report[i]["date"], report[i]["rechargeAmount"], report[i]["creditsAdded"], report[i]["receiptLink"]]);
						}
					}
				} else if (appData.headers.responseCode == '504') {
					Util.redirectToIndex();
				}
			}
		},
		getAllAppsApi : {
			getPostData : function() {
				return {
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			updateSupportAppList : function(guiData, appData) {
				//console.log("updateAppList: updating appData [" + JSON.stringify(appData) + "] ");
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("elid")) {
						var el = "#" + guiData.elid;
						var apptag = $(el);
						apptag.empty();
						var data = appData.data;
						apptag.append(new Option('Select', ''));
						$.each(data, function(i) {
							//console.log("adding value = " + data[i].appId + ", text = " + data[i].appName);
							apptag.append(new Option(data[i].appName, data[i].id));
						});
						// apptag.multiselect('rebuild');
					}
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				}
			},
			updateAppList : function(guiData, appData) {
				//console.log("updateAppList: updating appData [" + JSON.stringify(appData) + "] ");
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("elid")) {
						var el = "#" + guiData.elid;
						var apptag = $(el);
						apptag.empty();
						var data = appData.data;
						$.each(data, function(i) {
							//console.log("adding value = " + data[i].appId + ", text = " + data[i].appName);
							apptag.append(new Option(data[i].appName, data[i].id));
						});
						apptag.multiselect('rebuild');
					}
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				}
			},
			updateAppListAnalytics : function(guiData, appData) {
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("elid")) {
						var el = "#" + guiData.elid;
						var apptag = $(el);
						apptag.empty();
						var data = appData.data;
						$.each(data, function(i) {
							//console.log("adding value = " + data[i].appId + ", text = " + data[i].appName);
							apptag.append(new Option(data[i].appName, data[i].appId));
						});
						apptag.multiselect('rebuild');
					}
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				}
			}
		},
		getLiveAppsApi : {
			getPostData : function() {
				return {
					groupId : Util.getCookie(CookieNames()['groupId']),
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			updateLiveAppCount : function(guiData, appData) {
				//console.log("updateLiveAppCount called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("elid")) {
						//console.log("Updating count with " + appData.data[0].count);
						$('#' + guiData.elid).text(appData.data[0].count);
					}
				}
			}
		},
		getAllSecUsersApi : {
			getPostData : function() {
				return {
					groupId : Util.getCookie(CookieNames()['groupId']),
					sessionId : Util.getCookie(CookieNames()['sessionId']),
					userId : Util.getCookie(CookieNames()['userId'])
				};
			},
			updateSecUserDetails : function(guiData, appData) {
				//console.log("updateSecUserDetails called with appData: " + JSON.stringify(appData));
				if (appData.code == '200') {
					if (Util.isDefined(guiData) && guiData.hasOwnProperty("elid")) {
						var data = appData.data;
						$('#' + guiData.elid).empty();
						var userDataHtml = '';
						for (var i = 0; i < data.length; ++i) {
							userDataHtml += '<ul class="secuserpanel">';
							var dataUserName = 'data-username="' + data[i].userName + '"';
							var dataRevokeId = 'data-revokeId="' + data[i].id + '"';
							userDataHtml += '<li class="getEmailID"><span>Email ID: </span><strong id="user' + data[i].id + '">' + data[i].email + '</strong></li>';
							var appNames = [];
							var appIds = [];
							var action = [];
							var j;
							if (data[i].apps) {
								for (var j = 0; j < data[i].apps.length; ++j) {
									//console.log("updateSecUserDetails, found new app " + data[i].apps[j].appName);
									//console.log("updateSecUserDetails, found new app " + data[i].apps[j].id);
									appNames.push(data[i].apps[j].appName);
									appIds.push(data[i].apps[j].id);
								}
							}
							userDataHtml += '<li><span><input type="hidden" id="appId' + data[i].id + '" value="' + appIds.join(',') + '"></input>';
							if (data[i].apps !== null) {
								if (Util.isDefined(data[i].apps.actions)) {
									var appReports1 = data[i].apps[0].actions.reports;
									var appManagement1 = data[i].apps[0].actions.update;
									userDataHtml += '<input type="hidden" id="reportId' + data[i].id + '" value="' + appReports1 + '"></input>';
									userDataHtml += '<input type="hidden" id="manageId' + data[i].id + '" value="' + appManagement1 + '"></input>';
								}
							}
							userDataHtml += '</span><span>App Name: </span><strong  id="app' + data[i].id + '">' + appNames.join(', ') + '</strong></li>';
							userDataHtml += '<li>';
							userDataHtml += '<button type="button" id="' + data[i].id + '" ' + dataUserName + ' ' + dataRevokeId + ' class="cancel" class="cancelAcc" data-toggle="modal" data-target="#exampleModal" data-backdrop="static" >Cancel Access</button>'
							userDataHtml += '<button type="button" class="edit" data-toggle="modal" onclick="editModalFun(' + data[i].id + ')">Edit</button>'
							userDataHtml += '</li>';
							userDataHtml += '</ul>';

						}
						$('#' + guiData.elid).html(userDataHtml);
					}
				} else if (appData.code == '504') {
					Util.redirectToIndex();
				}
			}
		},
		checkTransactionStatus : {
			getPostData : function() {
				var txId = $("#finalTxId").val();
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				return {
					txId : txId,
					sessionId : sessionId,
					customerId : customerId,
					userId : userId
				};

			},
			success : function(guiData, jsonObj) {
				//alert('checkTransactionStatus success');
				//alert(jsonObj.data.status);

				var timedOut = false;

				if ($("#currentTime").val() == "") {

					var date = new Date();
					var time = date.getTime();
					$("#currentTime").val(time);
				} else {
					var currentTime = new Date().getTime();
					var startTime = $("#currentTime").val();
					if (currentTime - startTime > FvConsts.paymentTransactionTimeout)
						timedOut = true;
				}
				if (jsonObj.data.status == 'PENDING' || jsonObj.data.status == 'PG_CALLBACK_RECIEVED') {
					if (timedOut == false) {
						setTimeout(getTransactionStatus, 5000);
					} else {
						$("#signupWait").modal("hide");
						Util.alert_message('#alert_template', FvAlerts['PAYMENT_REQUEST_TIMEDOUT']);
					}
				} else if (jsonObj.data.status == 'SUCCESS') {
					$("#signupWait").modal("hide");
					var credits = $("#finalCreditsAlloted").val();
					window.location.href = "payment-successful.html?credits=" + credits;
				} else if (jsonObj.data.status == 'FAIL') {
					$("#signupWait").modal("hide");
					window.location.href = "payment-unsuccessful.html";
				}

			}
		},
		paymentApi : {
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var amountEntered = $("#enteredAmount").val();
				var currencyType = 'USD';
				var userId = Util.getCookie(CookieNames()['userId']);
				var promoCode = $("#enteredPromoCode").val();
				//var planId = $('input[name=PLANS]:checked').attr('planId');
				var planId = 0;
				if ($('#event_dropdown').val() == 'EVENT') {
					planId = $('#IdPlan').val();
				} else {
					planId = $('#subscriptionPlan').val();
				}
				return {
					sessionId : sessionId,
					customerId : customerId,
					amountEntered : amountEntered,
					currencyType : currencyType,
					userId : userId,
					promoCode : promoCode,
					planId : planId
				};
			},
			success : function(guiData, jsonObj) {
				var username = Util.getCookie(CookieNames()['userName']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var userNameArray = username.split(" ");
				if ($('#getPlanType').val() == 'EVENT') {
					$("#" + guiData.paypalAmountFieldId).val(jsonObj.data.finalAmount);
					$("#" + guiData.paypalFirstName).val(userNameArray[0]);
					$("#" + guiData.paypalLastName).val(userNameArray[userNameArray.length - 1]);
					$("#" + guiData.finalTxId).val(jsonObj.data.transactionId);
					$("#" + guiData.paypalFvTxId).val(jsonObj.data.transactionId + "," + customerId);
					$("#" + guiData.paypalItem).val(jsonObj.data.finalCredits + " Credits - foneverify");
					$("#" + guiData.formId).submit();
				} else {
					$('#paypalSubscriptionPlanName').val($('#subscriptionPlan option:selected').text());
					//+' '+$('input[name=PLANS]:checked').attr('planAmount'));
					$('#paypalSubscriptionPlanDays').val($('#expiryInDays').val());
					$('#paypalSubscriptionPlanActualAmount').val(jsonObj.data.finalAmount);
					$('#paypalSubscriptionPlanTxId').val(jsonObj.data.transactionId);
					$("#paypalSubscriptionPlanCustom").val(jsonObj.data.transactionId + "," + customerId);
					$("#" + guiData.finalTxId).val(jsonObj.data.transactionId);
					$('#paypalSubscriptionPlanCallbackUrl').val(FvConsts.apiBaseUrl + 'subscription/success');
					$('#paypalSubscriptionPlanCancelCallbackUrl').val(FvConsts.apiBaseUrl + 'subscription/cancel');
					$("#" + guiData.subFormId).submit();
				}
				$("#signupWait").modal("show");
				setTimeout(getTransactionStatus, 5000);
			},
			validate : function() {
				if ($("#enteredAmount").val().trim() == "") {
					FvVariables.errorMessage = "Please enter the correct amount.";
					Util.displayErrorMessage(document.getElementById('enteredAmount'));
					//Util.alert_message('#alert_template', 'Please enter a valid amount.');
					return false;
				}
				var enteredAmount = parseInt($("#enteredAmount").val().trim());
				var minimumAmount = parseInt($('#minimumAmount').val());
				if (enteredAmount < minimumAmount) {
					FvVariables.errorMessage = 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.';
					Util.displayErrorMessage(document.getElementById('enteredAmount'));
					//Util.alert_message('#alert_template', 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.');
					return false;
				}
				return true;

			}
		},
		payamentInitiated : {

			success : function(guiData, jsonObj) {

				if (jsonObj.code == 200) {
					$("#" + guiData.finalPaybleField).val(jsonObj.data.finalAmount);
					$("#" + guiData.finalCreditsAllotedField).val(jsonObj.data.finalCredits);
				} else if (jsonObj.code == 518) {
					Util.alert_message('#alert_template', 'Please enter a valid promo code.');
				} else if (jsonObj.code == 519) {
					Util.alert_message('#alert_template', 'Please enter an amount < ' + jsonObj.errorMsg);
					$('#minimumAmount').val(jsonObj.errorMsg);
				}

			},
			getPostData : function() {
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var amountEntered = $("#enteredAmount").val();
				var currencyType = 'USD';
				var userId = Util.getCookie(CookieNames()['userId']);
				var promoCode = $("#enteredPromoCode").val();
				//var planId = $('input[name=PLANS]:checked').attr('planId');
				var planId = '';
				if ($('#event_dropdown').val() == 'EVENT') {
					planId = $('#IdPlan').val();
				} else {
					planId = $('#subscriptionPlan').val();
				}
				return {
					sessionId : sessionId,
					customerId : customerId,
					amountEntered : amountEntered,
					currencyType : currencyType,
					userId : userId,
					promoCode : promoCode,
					planId : planId
				};
			},
			validate : function() {
				if (Util.isDefined($("#enteredAmount").val()) && $("#enteredAmount").val().trim() == "") {
					FvVariables.errorMessage = "Please enter the correct amount.";
					Util.displayErrorMessage(document.getElementById('enteredAmount'));
					//Util.alert_message('#alert_template', 'Please enter a valid amount.');
					return false;
				}
				var enteredAmount = parseInt(Util.isDefined($("#enteredAmount").val()) ? $("#enteredAmount").val().trim() : $("#enteredAmount").val());
				var minimumAmount = parseInt($('#minimumAmount').val());
				if (enteredAmount < minimumAmount) {
					FvVariables.errorMessage = 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.';
					Util.displayErrorMessage(document.getElementById('enteredAmount'));
					//Util.alert_message('#alert_template', 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.');
					return false;
				}
				return true;
			}
		},
		deleteApp : {
			init : function() {
				return {
					postData : {
						sessionId : Util.getCookie(CookieNames()['sessionId']),
						userId : Util.getCookie(CookieNames()['userId']),
					},
					guiData : {
						sessionId : Util.getCookie(CookieNames()['sessionId']),
						userId : Util.getCookie(CookieNames()['userId']),
					}

				};

			},

			showConfirmPopup : function(eventData) {
				$('#confirmDelete').removeAttr("appId");

				$('#confirmDelete').attr("appId", $(eventData.currentTarget).attr("appId"));

				$('#deleteApp').modal("show");
			},
			execute : function(eventData) {
				eventData.data = FvApiCallbacks.deleteApp.init();
				var appid = $(eventData.currentTarget).attr("appId");
				eventData.data.postData['appId'] = appid;
				eventData.data.guiData.callback = FvApiCallbacks.deleteApp.success;
				FvApis.deleteApp(eventData);
			},
			success : function(eventData) {
				Util.alert_message('#alert_template', 'Application successfully deleted.');
				var el = '#tbAppDetails';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();
				var guiData = {
					elid : 'appnamemanageapp',
					callback : FvApiCallbacks.getAllAppsApi.updateAppListAnalytics
				};
				FvApis.getAllAppsForUser({
					data : {
						guiData : guiData,
						getPostData : FvApiCallbacks.getAllAppsApi.getPostData
					}
				});
				onLoadTableAppend();
			}
		}
	};
}();

function editModalFun(e) {
	$('#EditModal').modal('show');
	var tEmail = "#user" + e;
	var tappId = "#appId" + e;
	var getEmailID = $(tEmail).text();
	var appidStr = $(tappId).val();
	//console.log(appidStr);
	$('#EditModal').find('#modalEmailId').val(getEmailID);
	var appname = appidStr.split(',');
	//console.log(appname);
	$('#secuserid').val(e);
	$("#appnamemanageapp option:selected").removeAttr("selected");
	for (var i = 0; i < appname.length; i++) {
		var appnameTrim = appname[i].trim();
		//$("#appnamemanageapp").find(":checkbox[value='163']").attr("checked","checked");
		$("#appnamemanageapp option[value='" + appnameTrim + "']").attr("selected", true);
		//$("#appnamemanageapp option:contains("+appnameTrim+")").attr("selected", true);
	}
	$("#appnamemanageapp").multiselect("refresh");

	if ($("#reportId" + e).val() == 'true' || $("#reportId" + e).val() == true) {
		$('#editviewreport').prop("checked", true);
	} else {
		$('#editviewreport').prop("checked", false);
	}

	if ($("#manageId" + e).val() == 'true' || $("#manageId" + e).val() == true) {
		$('#editappmanagement').prop("checked", true);
	} else {
		$('#editappmanagement').prop("checked", false);
	}

}

function disableMenuLinks() {
	var isViewReports = Util.getCookie(CookieNames()['viewReports']);
	var isAppMgmt = Util.getCookie(CookieNames()['appMgmt']);
	var pageName = location.pathname.split("/").pop();
	if (isViewReports == false || isViewReports == 'false') {
		if (pageName == 'summary.html' || pageName == 'verification-report.html') {
			window.location.href = "dashboard.html";
		}
		$('#_analytics').remove();
	}
	if (isAppMgmt == false || isAppMgmt == 'false') {
		if (pageName == 'add-apps.html' || pageName == 'manage-my-app.html') {
			window.location.href = "dashboard.html";
		}
		$('#_myApp').remove();
	}

}

function onloadCredis() {
	//disableMenuLinks();
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var customerId = Util.getCookie(CookieNames()['customerId']);
	$("#appnamemanageapp").css({
		'display' : 'none'
	});
	$('p#customerId > .strongKey').html(customerId);
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	$.ajax({
		type : "POST",
		data : postData,
		url : FvConsts.apiBaseUrl + "credits/getCurrentWalletStatus",
		async : true,
		success : function(data) {
			//console.log(data);
			var finalData = data;
			var responseCode = finalData.code;
			var totalCredit = finalData.data.total >= 0 ? finalData.data.total : 0;
			if (responseCode == '200') {

				$('#creditval').html(Util.isDefined(totalCredit) ? totalCredit : 0).append('<i class="fa fa-caret-down"></i>');
				//$('#creditval').html(totalCredit).append('<i class="fa fa-caret-down"></i>');
				Util.setCookie(CookieNames()['credits'], finalData.data.total);

			} else if (responseCode == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			//console.log("Unexpected error, please try later");
		}
	});
	$.ajax({
		type : "GET",
		data : postData,
		url : FvConsts.apiBaseUrl + "user/getUserDetails",
		async : true,
		success : function(data) {
			//console.log(data);
			var finalData = data;
			var responseCode = finalData.code;
			var trialTest = finalData.data.isTrialTestingDone;
			if (responseCode == '200') {
				if (finalData.data[0].isTrialTestingDone === true) {
					$("#dashboardAfter").css("display", "none");
					$("#dashboardBefore").css("display", "block");
					$('#accountid').html(customerId);
					$('#promoCode').css("display", "none");
					var user = Util.getCookie(CookieNames()['userName']);
					$('#dashboard_userName').append(user + "!");
				} else {
					$("#dashboardBefore").css("display", "none");
					$("#dashboardAfter").css("display", "block");
					$('#promoCode').css("display", "block");
				}
				Util.setCookie(CookieNames()['email'], finalData.data[0].email);
			} else if (responseCode == '504') {
				//alert("session time out");
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			//console.log("Unexpected error, please try later");
		}
	});
	setTimeout(function() {
		$(".se-pre-con").css("display", "block");
		var sessionId = Util.getCookie(CookieNames()['sessionId']);
		var userId = Util.getCookie(CookieNames()['userId']);
		var customerId = Util.getCookie(CookieNames()['customerId']);
		var postData = {};
		postData['sessionId'] = sessionId;
		postData['userId'] = userId;
		var getValue = $("#callflow option:eq(2)").val();
		//console.log(getValue);
		$.ajax({
			type : 'POST',
			data : postData,
			url : FvConsts.apiBaseUrl + "dashboard/getAllDemoApps",
			success : function(data) {// callback method for further manipulations
				var responseCode = data.code;
				var finalData = data.data;
				if (responseCode == '200') {
					for (var i = 0; i < finalData.length; i++) {
						if (finalData[i].callFlowId == getValue) {
							$('p#keyOnchange > .strongKey').html('');
							$('p#secretOnChange > .strongSecret').html('');
							$('p#urlonchange').html();
							var key = finalData[i].appSecret;
							var secret = finalData[i].appId;
							var endPoint = finalData[i].endPoint;
							$('p#keyOnchange > .strongKey').html(key);
							$('p#secretOnChange > .strongSecret').html(secret);
							$('p#urlonchange').append('curl "' + FvConsts.trialApiBaseUrl + endPoint + '" -X POST <br> --data "appKey=' + key + '&customerId=' + customerId + '&<br>isoCountryCode=IN&msisdn=9XXXXXXXXX" <br> --header "Content-Type: application/x-www-form-urlencoded"');
							$('p#urlupdateonchange').append('curl "' + FvConsts.trialApiBaseUrl + 'update?appKey=' + key + '&customerId=' + customerId + '&<br><b>verificationId=X</totalCredit>&code=XXXX"');

						}

						FvVariables.appGeneratedArr[i] = finalData[i].appId;

					}

				} else if (responseCode == '504') {
					Util.redirectToIndex();
				}
				$(".se-pre-con").css("display", "none");
			},
			error : function(e) {// if error occured
				$(".se-pre-con").css("display", "none");
				//alert('error');
			}
		});

	}, 500);
};

initSignin = function() {

	$('#signinWithFB').on('click', function() {
		FB.getLoginStatus(function(response) {
			statusChangeCallback(response, 'signIn');
		});
	});

	$('#signinWithGoogle').on('click', function() {
		FvVariables.googleSignedIn = auth2.isSignedIn.get();
		auth2.signIn({
			'scope' : 'profile email'
		}).then(function(googleUser) {
			//console.log("google User");
			// auth2.currentUser.get()
			//console.log(auth2.currentUser.get().getBasicProfile().getName());
			var profile = googleUser.getBasicProfile();
			FvConsts.socialLoginType = 'google';
			socialLoginToFoneverify(profile.getName(), profile.getEmail(), profile.getId(), 'signin');
			if (!FvVariables.googleSignedIn) {
				auth2.signOut().then(function() {
					//console.log('User signed out.');
				});
			}
		}, function(error) {
			alert(JSON.stringify(error, undefined, 2));
		});
	});
	$('#signinWithLinkedin').on('click', function() {
		FvVariables.linkedinAuth = IN.User.isAuthorized();
		IN.User.authorize(Authorize);
	});

	function Authorize() {
		IN.API.Profile("me").fields("firstName", "lastName", "industry", "email-address", "id").result(function(data) {
			FvConsts.socialLoginType = 'linkedIn';
			socialLoginToFoneverify(data.values[0].firstName + ' ' + data.values[0].lastName, data.values[0].emailAddress, data.values[0].id, 'signin');
		});
		//console.log("already authorized");
		////console.log(IN.User.isAuthorized());
		if (!FvVariables.linkedinAuth) {
			IN.User.logout(Logout);
		}
	}

	function Logout() {
	}

	var guiData = {
		elid : 'status',
		beforeSend : FvApiCallbacks.loginApi.beforeSend,
		uiCleanup : FvApiCallbacks.loginApi.uiCleanup,
		callback : FvApiCallbacks.loginApi.success
	};
	$("#signup").on('click', {
		guiData : guiData,
		getPostData : FvApiCallbacks.loginApi.getPostData
	}, FvApis.login);
	$('#password').keypress(function(e) {
		var code = e.keyCode || e.which;
		if (code == 13)
			FvApis.login({
				data : {
					guiData : guiData,
					getPostData : FvApiCallbacks.loginApi.getPostData
				}
			});
	});
	//$("#signupform").on('submit', FvApiCallbacks.signupApi.proceedSubmit);

	$.getJSON('js/countries.json', function(json) {

		//$('#ccode').append('<option disabled selected value="">Select</option>');
		for (var i = 0; i < json.length; ++i) {
			$('#ccode').append($('<option>', {
				value : json[i].code,
				text : '+' + json[i].phoneCode
			}));
		}
	});

	if (localStorage.chkbx && localStorage.chkbx != '') {
		$('#rememberme').attr('checked', 'checked');
		$('#emailid').val(localStorage.usrname);
		$('#password').val(localStorage.pass);
	} else {
		$('#rememberme').removeAttr('checked');
		$('#emailid').val('');
		$('#password').val('');
	}
	$('body').on('keydown', 'input', function(e) {
		if (e.which === 9) {
			Util.validateSingleField(e);
		}
	});
	$('#rememberme').click(function() {
		if ($('#rememberme').is(':checked')) {
			// save username and password
			localStorage.usrname = $('#emailid').val();
			localStorage.pass = $('#password').val();
			localStorage.chkbx = $('#rememberme').val();
		} else {
			localStorage.usrname = '';
			localStorage.pass = '';
			localStorage.chkbx = '';
		}
	});

	$('#emailid,#password').blur(function(e) {
		Util.validateSingleField(e);
	});
};
initSignup = function() {

	$('#signupWithFB').on('click', function() {
		FB.getLoginStatus(function(response) {
			statusChangeCallback(response, 'signUp');
		});
	});

	$('#signupWithGoogle').on('click', function() {
		//console.log(auth2.currentUser.get());
		auth2.signIn({
			'scope' : 'profile email'
		}).then(function(googleUser) {
			//console.log("google User");
			// auth2.currentUser.get()
			//console.log(auth2.currentUser.get().getBasicProfile().getName());
			var profile = googleUser.getBasicProfile();
			FvConsts.socialLoginType = 'google';
			socialLoginToFoneverify(profile.getName(), profile.getEmail(), profile.getId(), 'signup');

		}, function(error) {
			alert(JSON.stringify(error, undefined, 2));
		});
	});
	$('#signupWithLinkedin').on('click', function() {
		FvVariables.linkedinAuth = IN.User.isAuthorized();
		IN.User.authorize(Authorize);
	});

	function Authorize() {
		IN.API.Profile("me").fields("firstName", "lastName", "industry", "email-address", "id").result(function(data) {
			FvConsts.socialLoginType = 'linkedIn';
			socialLoginToFoneverify(data.values[0].firstName + ' ' + data.values[0].lastName, data.values[0].emailAddress, data.values[0].id, 'signup');
		});
		//console.log("already authorized");
		////console.log(IN.User.isAuthorized());
		if (!FvVariables.linkedinAuth) {
			IN.User.logout(Logout);
		}
	}

	function Logout() {
	}

	// var guiData = {elid: 'status', beforeSend: FvApiCallbacks.loginApi.beforeSend, uiCleanup: FvApiCallbacks.loginApi.uiCleanup, callback: FvApiCallbacks.loginApi.success};
	$("#signupform").on('submit', FvApiCallbacks.signupApi.validate);
	$("#next").on("click", function(event) {
		var fields = document.getElementsByTagName('INPUT');
		FvVariables.target = 'next';
		validationCheckVar = Util.validateForm(fields);
		if (!validationCheckVar) {
			//do nothing
			//window.scrollTo(500, 0);
			event.preventDefault();
		} else {
			FvApiCallbacks.signupApi.validate
			//_gaq.push(['_trackEvent', 'button', 'clicked', 'sign up',, 'true']);
			return true;
		}
	});
	// This is called with the results from from FB.getLoginStatus().

	var signupGuiData = {
		callback : FvApiCallbacks.signupApi.success,
		beforeSend : FvApiCallbacks.signupApi.beforeSend
	};

	$('#signupProceed').on('click', function(e) {
		FvApis.signup({
			data : {
				guiData : signupGuiData,
				getPostData : FvApiCallbacks.signupApi.getPostData
			}
		});
	});

};
initAnalyticsSummary = function() {
	//console.log("Initializing Analytics Summary Page");
	Util.checkSession();
	Util.checkGuestSession();
	if (Util.getCookie(CookieNames()['groupId']) == 3) {
		$('#finReportLink').hide();
	}

	//$('#vrcountry').change({guiData: guiData, getPostData: FvApiCallbacks.logoutApi.getPostData}, function() { alert('hi')});
	//$('#vrcountry').change(function() { alert('hi')});

	var user = Util.getCookie(CookieNames()['userName']);
	//console.log("cookie is set for user " + user);
	$('#userlogo').attr('title', 'Welcome ' + user);
	$('[data-toggle="tooltip"]').tooltip();
	$('#home').attr('href', "dashboard.html");

	/*var guiData = {
	 beforeSend : FvApiCallbacks.logoutApi.beforeSend,
	 callback : FvApiCallbacks.logoutApi.success
	 };
	 $("#logout").on('click', {
	 guiData : guiData,
	 getPostData : FvApiCallbacks.logoutApi.getPostData
	 }, FvApis.logout);*/

	var guiDataToday = {
		tableid : 'summReport',
		lblId : 'rptTitle',
		type : 'Today',
		callback : FvApiCallbacks.getVerReportApi.updateAnalyticsSumm
	};
	var guiDataWkly = {
		tableid : 'summReport',
		lblId : 'rptTitle',
		type : 'Weekly',
		callback : FvApiCallbacks.getVerReportApi.updateAnalyticsSumm
	};
	var guiDataMnthly = {
		tableid : 'summReport',
		lblId : 'rptTitle',
		type : 'Monthly',
		callback : FvApiCallbacks.getVerReportApi.updateAnalyticsSumm
	};
	var postData = {
		appIdList : '',
		timeZone : '',
		countryList : '',
		startDate : '',
		endDate : '',
		groupBy : '',
		limit : '',
		offset : ''
	};

	$('#bRptToday').on('click', {
		guiData : guiDataToday,
		getPostData : FvApiCallbacks.getVerReportApi.getTodayPostData
	}, FvApis.getVerificationReport);
	$('#bRptWeek').on('click', {
		guiData : guiDataWkly,
		getPostData : FvApiCallbacks.getVerReportApi.getWeekPostData
	}, FvApis.getVerificationReport);
	$('#bRptMonth').on('click', {
		guiData : guiDataMnthly,
		getPostData : FvApiCallbacks.getVerReportApi.getMonthPostData
	}, FvApis.getVerificationReport);

	guiData = {
		elid : 'vrapp',
		callback : FvApiCallbacks.getAllAppsApi.updateAppListAnalytics
	};
	// $('a#verLink').on('click', {guiData: guiData, getPostData: FvApiCallbacks.getAllAppsApi.getPostData}, FvApis.getAllAppsForUser);

	//FvApis.getAllAppsForUser({data: {guiData: guiData, getPostData: FvApiCallbacks.getAllAppsApi.getPostData}});

	var dataDefault = {
		data : {
			guiData : guiDataToday,
			getPostData : FvApiCallbacks.getVerReportApi.getTodayPostData
		}
	};
	var configData = {
		tableid : 'tblVerRept',
		type : 'Monthly'/*NOTE: only for test*/,
		callback : FvApiCallbacks.getVerReportApi.success
	};

	FvApis.getVerificationReport(dataDefault);

	$('#bReportGen').on('click', {
		guiData : configData,
		getPostData : FvApiCallbacks.getVerReportApi.getPostData
	}, FvApis.getVerificationReport);

	// Get the report for today
	//FvApis.getVerificationReport({data: {guiData: guiDataToday, getPostData: FvApiCallbacks.getVerReportApi.getTodayPostData}});
	// Get the live app count
	//console.log("Calling getLiveAppsForUser");
	//  FvApis.getLiveAppsForUser({data: {guiData: {elid: 'lbAppCount', callback: FvApiCallbacks.getLiveAppsApi.updateLiveAppCount}, getPostData: FvApiCallbacks.getLiveAppsApi.getPostData}});

	//console.log("binding finReport link");
	configData = {
		tableid : 'finReport',
		callback : FvApiCallbacks.finReportApi.updateFinReport
	};
	$("#finReportLink").on('click', {
		guiData : configData,
		getPostData : FvApiCallbacks.finReportApi.getPostData
	}, FvApis.finReport);

};
initDashboard = function() {
	//console.log("initDashboard enter");
	Util.checkSession();
	Util.checkGuestSession();

	if (Util.getCookie(CookieNames()['groupId']) == 3) {
		$('#addSecUserDiv').hide();
		$('a#addSecUser').hide();
		$('#topUpOp').hide();
		$('#topUpDiv').hide();
	}
	// get the call flows
	var guiData = {
		elid : 'callflow',
		beforeSend : FvApiCallbacks.getCallFlowsApi.beforeSend,
		callback : FvApiCallbacks.getCallFlowsApi.success
	};
	FvApis.getAllCallFlows({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getCallFlowsApi.getPostData
		}
	});
	$("#dboardlink").on('click', {
		guiData : guiData,
		getPostData : FvApiCallbacks.getCallFlowsApi.getPostData
	}, FvApis.getAllCallFlows);

	var user = Util.getCookie(CookieNames()['userName']);
	$('#userlogo').attr('title', 'Welcome ' + user);
	$('[data-toggle="tooltip"]').tooltip();
	$('#home').attr('href', "dashboard.html");

	/*	var guiData = {
	beforeSend : FvApiCallbacks.logoutApi.beforeSend,
	callback : FvApiCallbacks.logoutApi.success
	};
	$("#logout").on('click', {
	guiData : guiData,
	getPostData : FvApiCallbacks.logoutApi.getPostData
	}, FvApis.logout);*/

	//$('#myAcccount').on('click', {guiData: {callback: FvApiCallbacks.getUserDetailsApi.success}, getPostData: FvApiCallbacks.getUserDetailsApi.getPostData}, FvApis.getUserDetails);
	//Handles dashboard progress bar status.
	$('#naviagte_to_integrate, #naviagte_to_purchaseCredit ,#navigate_to_register,#naviagte_to_integrate_icon, #naviagte_to_purchaseCredit_icon ,#navigate_to_register_icon').on('click', function(event) {
		if (event.target.id == "naviagte_to_integrate" || event.target.id == "naviagte_to_integrate_icon") {
			FvVariables.progressBarStatus = 'integrateYourApp';
			location.href = 'api-docs.html';
		} else if (event.target.id == "naviagte_to_purchaseCredit" || event.target.id == "naviagte_to_purchaseCredit_icon") {
			FvVariables.progressBarStatus = 'purchaseCredits';
			location.href = 'pay-flow.html';
		} else if (event.target.id == "navigate_to_register" || event.target.id == "navigate_to_register_icon") {
			FvVariables.progressBarStatus = 'registerYourApp';
			location.href = 'add-apps.html';
		}
		//Util.showProgressBarStatus();
	});
	$('#emailToSupport').on('click', function(event) {
		Util.sendEmail($('#' + event.target.id).val());
	});

	//console.log("initDashboard exit");
};

initForgotPasswd = function() {
	var guiData = {
		elid : 'lbGetPasswdStatus',
		toHide : {
			id1 : 'email',
			id2 : 'btGetPasswd'
		},
		beforeSend : FvApiCallbacks.getPasswordApi.beforeSend,
		callback : FvApiCallbacks.getPasswordApi.success
	};
	//console.log("Initializign forgot password page");
	$("#btGetPasswd").on('click', {
		guiData : guiData,
		getPostData : FvApiCallbacks.getPasswordApi.getPostData
	}, FvApis.getPassword);
};
getGuestDetailsWrap = function() {
	FvApis.getGuestDetails({
		data : {
			guiData : {
				callback : FvApiCallbacks.getGuestDetailsApi.success
			},
			getPostData : FvApiCallbacks.getGuestDetailsApi.getPostData
		}
	});
};
initResetPasswd = function() {
	//console.log("initResetPasswd enter");
	$('#resetForm').on('submit', function() {
		var guiData = {
			validate : FvApiCallbacks.resetPasswdApi.validate,
			beforeSend : FvApiCallbacks.resetPasswdApi.beforeSend,
			callback : FvApiCallbacks.resetPasswdApi.success
		};
		FvApis.resetPassword({
			data : {
				guiData : guiData,
				getPostData : FvApiCallbacks.resetPasswdApi.getPostData
			}
		});
		return false;
	});

	//console.log("initResetPasswd exit");
};
inituv = function() {
	//console.log("inituv enter");
	FvApiCallbacks.resendOtpApi.hideCountDown();
	Util.disableLink('resendOtp');
	FvApiCallbacks.resendOtpApi.startCountDown(FvConsts.otpCountDown);
	FvApis.getGuestDetails({
		data : {
			guiData : {
				callback : FvApiCallbacks.getGuestDetailsApi.success
			},
			getPostData : FvApiCallbacks.getGuestDetailsApi.getPostData
		}
	});
	$('#foneverifying').on('click', {
		guiData : {
			beforeSend : FvApiCallbacks.startFvApi.beforeSend,
			callback : FvApiCallbacks.loginApi.success
		},
		getPostData : function() {
			return {
				userId : Util.getCookie(CookieNames()['userId']),
				sessionId : Util.getCookie(CookieNames()['sessionId'])
			};
		}
	}, FvApis.startFv);
	$('#verifyOtp').on('click', {
		guiData : {
			callback : FvApiCallbacks.verifyOtpApi.success,
			validate : FvApiCallbacks.verifyOtpApi.validate
		},
		getPostData : FvApiCallbacks.verifyOtpApi.getPostData
	}, FvApis.verifyOtp);
	$('#resendOtp').on('click', {
		guiData : {
			callback : FvApiCallbacks.resendOtpApi.success
		},
		getPostData : FvApiCallbacks.resendOtpApi.getPostData
	}, FvApis.resendOtp);

	//	$('#resendOtp').on('click',alert());

	$('#resendEmail').on('click', {
		guiData : {
			callback : FvApiCallbacks.resendEmail.success
		},
		getPostData : FvApiCallbacks.resendEmail.getPostData
	}, FvApis.resendEmail);

	//console.log("inituv exit");
};
initSecSignup = function() {
	//console.log("initSecSignup enter");
	$('#signupform').on('submit', function() {
		var guiData = {
			callback : FvApiCallbacks.signupSecUserApi.success,
			beforeSend : FvApiCallbacks.signupSecUserApi.beforeSend,
			validate : FvApiCallbacks.signupSecUserApi.validate
		};
		FvApis.signupSecUser({
			data : {
				guiData : guiData,
				getPostData : FvApiCallbacks.signupSecUserApi.getPostData
			}
		});
		return false;
	});
	FvApis.getPrefilledFormDetails({
		data : {
			guiData : {
				callback : FvApiCallbacks.getPrefilledFormDetailsApi.success
			},
			getPostData : function() {
				return {
					serviceCode : Util.getUrlParam('serviceCode')
				};
			}
		}
	});
	//console.log("initSecSignup exit");
};
//----------------------------------------------------------

initUserProfile = function() {
	//console.log("initUserProfile enter");
	Util.checkSession();
	Util.checkGuestSession();

	var guiData = {
		elid : 'callflow',
		beforeSend : FvApiCallbacks.getCallFlowsApi.beforeSend,
		callback : FvApiCallbacks.getCallFlowsApi.success
	};
	FvApis.getAllCallFlows({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getCallFlowsApi.getPostData
		}
	});
	//--$('#addApps').on('click', {guiData: guiData, getPostData: FvApiCallbacks.getCallFlowsApi.getPostData}, FvApis.getAllCallFlows);

	var guiData = {
		elid : 'appnameuser',
		callback : FvApiCallbacks.getAllAppsApi.updateAppList
	};
	FvApis.getAllAppsForUser({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getAllAppsApi.getPostData
		}
	});
	//--  $('#addSecUser').on('click', {guiData: guiData, getPostData: FvApiCallbacks.getAllAppsApi.getPostData}, FvApis.getAllAppsForUser);

	var guiData = {
		elid : 'appnamemanageapp',
		callback : FvApiCallbacks.getAllAppsApi.updateAppList
	};
	FvApis.getAllAppsForUser({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getAllAppsApi.getPostData
		}
	});
	//--  $('#manageMyApp').on('click', {guiData: guiData, getPostData: FvApiCallbacks.getAllAppsApi.getPostData}, FvApis.getAllAppsForUser);

	/*guiData = {
	 beforeSend : FvApiCallbacks.logoutApi.beforeSend,
	 callback : FvApiCallbacks.logoutApi.success
	 };
	 $("#logout").on('click', {
	 guiData : guiData,
	 getPostData : FvApiCallbacks.logoutApi.getPostData
	 }, FvApis.logout);*/

	var user = Util.getCookie(CookieNames()['userName']);
	$('#userlogo').attr('title', 'Welcome ' + user);
	$('[data-toggle="tooltip"]').tooltip();

	$('#addAppForm').on('submit', function() {
		var addAppGD = {
			beforeSend : FvApiCallbacks.addAppApi.beforeSend,
			uiCleanup : FvApiCallbacks.addAppApi.uiCleanup,
			callback : FvApiCallbacks.addAppApi.success,
			validate : FvApiCallbacks.addAppApi.validate
		};
		FvApis.addApp({
			data : {
				guiData : addAppGD,
				getPostData : FvApiCallbacks.addAppApi.getPostData
			}
		});
		return false;
	});

	$('#addSecUserForm').on('submit', function() {
		var addSecUserGD = {
			callback : FvApiCallbacks.addSecUserApi.success,
			beforeSend : FvApiCallbacks.addSecUserApi.beforeSend,
			validate : FvApiCallbacks.addSecUserApi.validate
		};
		FvApis.addSecUser({
			data : {
				guiData : addSecUserGD,
				getPostData : FvApiCallbacks.addSecUserApi.getPostData
			}
		});
		return false;
	});

	FvApis.getUserDetails({
		data : {
			guiData : {
				callback : FvApiCallbacks.getUserDetailsApi.success
			},
			getPostData : FvApiCallbacks.getUserDetailsApi.getPostData
		}
	});
	if (Util.getCookie(CookieNames()['sessionId'])) {
		$('#home').attr('href', "dashboard.html");
	} else {
		//console.log("Cookie for session id not set");
	}

	$('#updateUserDetailsForm').on('submit', function() {
		var addSecUserGD = {
			callback : FvApiCallbacks.updateUserDetailsApi.success,
			beforeSend : FvApiCallbacks.updateUserDetailsApi.beforeSend,
			validate : FvApiCallbacks.updateUserDetailsApi.validate
		};
		FvApis.updateUserDetails({
			data : {
				guiData : addSecUserGD,
				getPostData : FvApiCallbacks.updateUserDetailsApi.getPostData
			}
		});
		return false;
	});
	// Get the sec. users
	//console.log("Calling getAllSecondaryUsers");
	FvApis.getAllSecondaryUsers({
		data : {
			guiData : {
				elid : 'dvSecUser',
				callback : FvApiCallbacks.getAllSecUsersApi.updateSecUserDetails
			},
			getPostData : FvApiCallbacks.getAllSecUsersApi.getPostData
		}
	});

	$('#exampleModal').on('show.bs.modal', function(e) {
		$('#revokePermBtn').data('revokeid', $('#' + e.relatedTarget.id).data('revokeid'));
		$('#secusername').html($('#' + e.relatedTarget.id).data('username'));
	});
	$('#revokePermBtn').on('click', function(e) {
		var revokeid = $(this).data('revokeid');
		FvApis.revokePerm({
			data : {
				guiData : {
					callback : FvApiCallbacks.revokePermApi.success
				},
				getPostData : function() {
					return {
						sessionId : Util.getCookie(CookieNames()['sessionId']),
						userId : Util.getCookie(CookieNames()['userId']),
						revokingId : revokeid
					};
				}
			}
		});
	});
	//console.log("initUserProfile exit");
};

initManageMyApp = function() {
	if (Util.getCookie(CookieNames()['groupId']) == 3) {
		$('#addSecUser').hide();
	}
	onLoadTableAppend();
	var guiData = {
		elid : 'appnamemanageapp',
		callback : FvApiCallbacks.getAllAppsApi.updateAppListAnalytics
	};
	FvApis.getAllAppsForUser({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getAllAppsApi.getPostData
		}
	});
	$("#confirmDelete").on('click', FvApiCallbacks.deleteApp.execute);

};
initVerificationReport = function() {
	if (Util.getCookie(CookieNames()['groupId']) == 3) {
		$('#addSecUser').hide();
	}
	var guiData = {
		elid : 'appnamemanageapp',
		callback : FvApiCallbacks.getAllAppsApi.updateAppListAnalytics
	};
	FvApis.getAllAppsIncludingDeletedForUser({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getAllAppsApi.getPostData
		}
	});
	var tableToExcel = (function() {
		var uri = 'data:application/vnd.ms-excel;base64,',
		    template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>',
		    base64 = function(s) {
			return window.btoa(unescape(encodeURIComponent(s)));
		},
		    format = function(s, c) {
			return s.replace(/{(\w+)}/g, function(m, p) {
				return c[p];
			});
		};
		return function(table, name) {
			if (!table.nodeType)
				table = document.getElementById(table);
			var ctx = {
				worksheet : name || 'Worksheet',
				table : table.innerHTML
			};
			var blob = new Blob([format(template, ctx)]);
			var blobURL = window.URL.createObjectURL(blob);
			return blobURL;
		};
	})();

	$("#export, #exportXLS").on('click', function(event) {
		if ($('#excel').is(':checked')) {
			var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;
			var is_explorer = navigator.userAgent.indexOf('MSIE') > -1;
			var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;
			var is_safari = navigator.userAgent.indexOf("Safari") > -1;
			var is_opera = navigator.userAgent.toLowerCase().indexOf("op") > -1;
			if (is_chrome) {
				var blobURL = tableToExcel('tblVerRept', 'test_table');
				$(this).attr('download', 'verificationReport.xlsx');
				$(this).attr('href', blobURL);
			} else {
				safariExcelDownload();
			}

		} else {
			downloadVerificationReport(event);
		}
	});
	$('#appnamemanageapp').multiselect({
		includeSelectAllOption : true,
		allSelectedText : 'All Apps',
		onDropdownHide : function() {
			var sessionId = Util.getCookie(CookieNames()['sessionId']);
			var userId = Util.getCookie(CookieNames()['userId']);
			var accountId = Util.getCookie(CookieNames()['customerId']);
			var reportName = 'CustomerCountryList';
			var postData = {};
			postData['sessionId'] = sessionId;
			postData['userId'] = userId;
			postData['reportName'] = reportName;
			postData['customerId'] = accountId;
			var apps = $('#appnamemanageapp option:selected');
			var appIdList = [];
			$(apps).each(function(index, app) {
				appIdList.push($(apps[index]).val());
			});
			appIdList = appIdList.join(',');
			postData['appIdList'] = appIdList;
			$.ajax({
				type : "GET",
				data : postData,
				async : false,
				url : FvConsts.apiBaseUrl + 'analytics/countryInfo',
				success : function(data) {
					var responseCode = data.headers.responseCode;
					var countryName = [];
					var isoCC = [];
					if (responseCode == '200') {
						$('#vrcountry').empty();
						var finalData = data.body.reportData;
						for (var i = 0; i < finalData.length; i++) {
							if (finalData[i].appName && finalData[i].countryInfo) {
								var appName = finalData[i].appName;
								var countryInfo = finalData[i].countryInfo;
								for (var k = 0; k < countryInfo.length; k++) {
									if (countryInfo[k].countryName) {
										countryName.push(countryInfo[k].countryName);
										isoCC.push(countryInfo[k].isoCC);

									}

								}
							}

						}
						var uniqueCountry = countryName.filter(function(itm, i, countryName) {
							return i == countryName.indexOf(itm);
						});
						//alert(uniqueCountry);
						var uniqueIsocc = isoCC.filter(function(itm, i, isoCC) {
							return i == isoCC.indexOf(itm);
						});
						for (var j = 0; j < uniqueCountry.length; j++) {
							//console.log("uniqueCountry[j] ************* : " + uniqueCountry[j]);
							$('#vrcountry').append('<option value="' + uniqueIsocc[j] + '">' + uniqueCountry[j] + '</option>');
						}
						$("#vrcountry").multiselect("destroy").multiselect({
							nonSelectedText : "Country",
							enableCaseInsensitiveFiltering : true,
							includeSelectAllOption : true,
							allSelectedText : 'All Countries',
						});
					} else if (responseCode == 404) {

					}
				},
				error : function(data) {
					Util.alert_message('#alert_template', "Unexpected error, try later");

				}
			});
		}
	});
	$('#vrcountry').multiselect({
		nonSelectedText : "Country",
		enableCaseInsensitiveFiltering : true,
		includeSelectAllOption : true,
		allSelectedText : 'All Countries',
	});
	//--  $('#manageMyApp').on('click', {guiData: guiData, getPostData: FvApiCallbacks.getAllAppsApi.getPostData}, FvApis.getAllAppsForUser);
};
//----------------------------------------------------------

initEditSecUser = function() {
	Util.checkSession();
	Util.checkGuestSession();
	var user = Util.getCookie(CookieNames()['userName']);
	$('#userlogo').attr('title', 'Welcome ' + user);
	$('[data-toggle="tooltip"]').tooltip();
	$('#home').attr('href', "dashboard.html");
	$('#emailID').val(Util.getUrlParam('email'));
	var guiData = {
		elid : 'appnameuser',
		callback : FvApiCallbacks.getAllAppsApi.updateAppList
	};
	FvApis.getAllAppsForUser({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getAllAppsApi.getPostData
		}
	});
	$('#updateSecUserPermForm').on('submit', function() {
		var addSecUserGD = {
			callback : FvApiCallbacks.updateUserPermApi.success,
			beforeSend : FvApiCallbacks.updateUserPermApi.beforeSend,
			validate : FvApiCallbacks.updateUserPermApi.validate
		};
		FvApis.updateUserPerm({
			data : {
				guiData : addSecUserGD,
				getPostData : function() {
					var appManagement = $('#editappmanagement').is(":checked");
					var appReports = $('#editviewreport').is(":checked");
					var apps = $('#appnamemanageapp option:selected');
					var appIdList = [];
					$(apps).each(function(index, app) {
						appIdList.push($(apps[index]).val());
					});
					updatingId = $('#secuserid').val();
					return {
						sessionId : Util.getCookie(CookieNames()['sessionId']),
						userId : Util.getCookie(CookieNames()['userId']),
						updatingId : updatingId,
						appManagement : appManagement,
						appReports : appReports,
						appIds : appIdList.join(',')
					};
				}
			}
		});
		return false;
		location.reload();
	});
};

Date.prototype.getWeek = function() {
	var onejan = new Date(this.getFullYear(), 0, 1);
	return Math.ceil((((this - onejan) / 86400000) + onejan.getDay() + 1) / 7);
}
function myWalletonload() {
	/*var guiData = {
	 beforeSend : FvApiCallbacks.logoutApi.beforeSend,
	 callback : FvApiCallbacks.logoutApi.success
	 };
	 $("#logout").on('click', {
	 guiData : guiData,
	 getPostData : FvApiCallbacks.logoutApi.getPostData
	 }, FvApis.logout);*/
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var groupId = Util.getCookie(CookieNames()['groupId']);
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	postData['groupId'] = groupId;
	$.ajax({
		type : "POST",
		data : postData,
		url : FvConsts.apiBaseUrl + "credits/getCurrentWalletStatus",
		async : true,
		success : function(data) {
			//console.log(data);
			var finalData = data;
			var responseCode = finalData.code;

			if (responseCode == '200') {
				var totalCredit = finalData.data.total;
				$('#creditval').html(Util.isDefined(totalCredit) ? totalCredit : 0).append('<i class="fa fa-caret-down"></i>');
			} else if (responseCode == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			//console.log("Unexpected error, please try later");
		}
	});
	$.ajax({
		type : "POST",
		data : postData,
		url : FvConsts.apiBaseUrl + "credits/getDetailedWalletStatus",
		async : true,
		success : function(data) {
			//console.log(data);
			var responseCode = data.code;
			var finalData = data.data;
			var userDataHtml = '';
			var trialCredit = '';
			var purchasedCredit = '';
			var totalCredits = '';
			var totalDhtml = '';
			if (responseCode == '200') {
				for (var i = 0; i < finalData.length; i++) {
					if (finalData[i].type == 'PROMOTIONAL') {
						userDataHtml += '<li><div class="panel-l text-right">Type :</div><div class="panel-r"><label class="labelval1">' + finalData[i].type + '</label></div></li>';
						userDataHtml += '<li><div class="panel-l text-right">Free additional credits :</div><div class="panel-r"><label class="labelval2">' + finalData[i].credits + '</label></div></li>';

						if (finalData[i].expiredTime) {
							var getTime = finalData[i].expiredTime;
							var t = getTime.split(/[- :]/);
							// Apply each element to the Date function
							var d = new Date(t[0], t[1] - 1, t[2], t[3], t[4], t[5]);
							var finalTime = Util.getDiffInDays(d, new Date());
							//var niceTime = Util.time_ago(lastModifiedDate);
							userDataHtml += '<li><div class="panel-l text-right">Expires in :</div><div class="panel-r"><label class="labelval">' + finalTime + '&nbsp;Days</label></div></li>';
						} else {
							userDataHtml += '<li><div class="panel-l text-right">Expires on :</div><div class="panel-r"><label class="labelval">NA</label></div></li>';
						}
					} else if (finalData[i].type == 'TRIAL') {
						trialCredit += finalData[i].credits;
					} else if (finalData[i].type == 'PURCHASED') {
						purchasedCredit += finalData[i].credits;
						var lastModifiedDate = finalData[i].updatedTime;
						//alert(lastModifiedDate);
						var modified_date = new Date(lastModifiedDate);
						var final = lastModifiedDate.replace(/-/g, ' ');
						//alert(final);
						$('#lastdate').html(final);
					}
					//userDataHtml += '<li class="listdivider"></li>';
					$('#walletDetails').html(userDataHtml);
				}
				totalCredits = Number(trialCredit) + Number(purchasedCredit);
				$('#total').html(totalCredits);
			} else if (data.code == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			//console.log("Unexpected error, please try later");
		}
	});
};
/*
 initPayFlow = function() {
 Util.checkSession();
 Util.checkGuestSession();
 var guiData = {
 callback : FvApiCallbacks.paymentApi.success,
 formId : "paypalForm",
 subFormId : "paypalSubscriptionForm",
 paypalAmountFieldId : "paypalAmount",
 paypalFirstName : "paypalFirstName",
 paypalLastName : "paypalLastName",
 finalTxId : "finalTxId",
 paypalItem : "paypalItem",
 paypalFvTxId : "paypalFvTxId",
 validate : FvApiCallbacks.paymentApi.validate
 };

 $("#paypalButton").on('click', {
 guiData : guiData,
 getPostData : FvApiCallbacks.paymentApi.getPostData
 }, FvApis.saveInitialTransaction);
 var guiDataBlur = {
 callback : FvApiCallbacks.payamentInitiated.success,
 formId : "paypalForm",
 paypalAmountFieldId : "paypalAmount",
 finalPaybleField : "finalPaybleAmount",
 finalCreditsAllotedField : "finalCreditsAlloted",
 validate : FvApiCallbacks.payamentInitiated.validate
 };
 $("#enteredAmount").on('blur', {
 guiData : guiDataBlur,
 getPostData : FvApiCallbacks.payamentInitiated.getPostData
 }, FvApis.payamentInitiated);
 $("#enteredPromoCode").on('blur', {
 guiData : guiDataBlur,
 getPostData : FvApiCallbacks.payamentInitiated.getPostData
 }, FvApis.payamentInitiated);

 var guiData = {
 beforeSend : FvApiCallbacks.logoutApi.beforeSend,
 callback : FvApiCallbacks.logoutApi.success
 };
 $("#logout").on('click', {
 guiData : guiData,
 getPostData : FvApiCallbacks.logoutApi.getPostData
 }, FvApis.logout);

 $("#backButton").on('click', function() {
 window.location.href = document.referrer;
 });

 var dataDefault = {
 data : {
 guiData : {
 callback : FvApiCallbacks.getVerReportDoneSoFarApi
 },
 getPostData : FvApiCallbacks.getVerReportDoneSoFarApi.getPostData
 }
 };
 FvApis.getVerificationDoneSoFar(dataDefault);

 };*/
onLoadTableAppend = function() {
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var accountId = Util.getCookie(CookieNames()['customerId']);
	$('#accountid').val(accountId);
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	var appIds = "";
	$.ajax({
		type : "GET",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + "user/getAllAppsForUser",
		success : function(msg) {
			if (msg.code == '200') {
				for (var i = 0; i < msg.data.length; i++) {
					appIds += msg.data[i]["id"] + ",";
				}
			} else if (msg.code == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			console.error("Unexpected error, please try later");
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
		}
	});

	postData['appIds'] = appIds;
	$.ajax({
		type : "GET",
		data : postData,
		url : FvConsts.apiBaseUrl + "user/getDetailsForApps",
		async : false,
		success : function(appData) {
			if (appData.code == '200') {
				var el = '#tbAppDetails';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();
				var data = appData.data;
				for (var i = 0; i < data.length; i++) {
					var appUrl = Util.isDefined(data[i]['appUrl']) ? data[i]['appUrl'] : '-';
					var appSecret = Util.isDefined(data[i]['appSecret']) ? data[i]['appSecret'] : '-';
					var action = "";
					if (data[i]['actions']['update'] == true) {
						//action += '<button appId="'+data[i]['appId']+'" id="edit" class="btn btn-sm tbl-btn-view" data-toggle="modal" data-target="#editApps"'+
						//'onclick="datatableedit(this)"> Edit </button>';
						action += '<span class="glyphicon glyphicon-edit" aria-hidden="true" appId="' + data[i]['appId'] + '" id="edit" class="btn btn-sm' + 'tbl-btn-view" data-toggle="modal" data-target="#editApps"' + 'onclick="datatableedit(this)"></span>&nbsp;&nbsp;';
					}
					if (data[i]['actions']['delete'] == true) {
						action += '<span class="glyphicon glyphicon-trash delete" appId="' + data[i]['appId'] + '" id="delete_' + data[i]['appId'] + '" class="btn btn-sm tbl-btn-view"></span>';
						;
					}
					dTable.fnAddData([data[i]["appId"], data[i]["appName"], data[i]["appDesc"], appSecret, appUrl, data[i]['callFlowName'], action]);
				}
			} else if (appData.code == '504') {
				Util.redirectToIndex();
			} else {
				var el = '#tbAppDetails';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();
			}
		}
	});

	$(".delete").on('click', FvApiCallbacks.deleteApp.showConfirmPopup);
	//$("#confirmDelete").on('click',FvApiCallbacks.deleteApp.execute);
};
function dataSaveEdit() {
	var validappDes = '';
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var accountId = Util.getCookie(CookieNames()['customerId']);
	//var appId = $('#appIDModal').text();
	var findCallFlowID = $('#callflow option:selected').val();
	var appDesc = $('#appDescription').val();
	if (appDesc == '') {
		$("#editApps").modal('hide');
		Util.alert_message('#alert_template', 'Please fill the App description.');
		validappDes = false;
	} else {
		validappDes = true;
	}

	var appUrl = $('#urlWeb').val();
	var appid1 = sessionStorage.getItem('appid1');
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	postData['appId'] = appid1;
	postData['callFlowId'] = findCallFlowID;
	postData['appDesc'] = appDesc;
	postData['appUrl'] = appUrl;
	var appIds = "";
	$.ajax({
		type : "POST",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + "app/modifyApp",
		success : function(msg) {
			if (msg.code == '200' && validappDes == 'true' || validappDes == true) {
				$("#editApps").modal('hide');
				Util.alert_message('#alert_template', FvAlerts['APP_DETAILS_UPDATED']);
				var el = '#tbAppDetails';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();
				onLoadTableAppend();
			} else if (msg.code == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(msg) {
			Util.alert_message('#alert_template', "Unexpected error, try later");
			//alert('Error');
		}
	});
}

function datatableedit(e) {
	var appid1 = $(e).parents('tr').find('td:eq(0)').text();
	//alert(appid1);
	$('.appid').val(appid1);
	sessionStorage.setItem('appid1', appid1);
	var appname = $(e).parents('tr').find('td:eq(1)').text();
	$('.appserect').val(appname);
	var appdes = $(e).parents('tr').find('td:eq(2)').text();
	$('.descrp').val(appdes);
	var appsec = $(e).parents('tr').find('td:eq(3)').text();
	$('.secretkey').val(appsec);
	var weburl = $(e).parents('tr').find('td:eq(4)').text();
	$('.appweb').val(weburl);
	var callflowName = $(e).parents('tr').find('td:eq(5)').text();
	callflowName = callflowName.trim();
	$("#callflow option:contains(" + callflowName + ")").attr("selected", true);

}

getTransactionStatus = function() {
	var data = {
		data : {
			guiData : {
				callback : FvApiCallbacks.checkTransactionStatus.success
			},
			getPostData : FvApiCallbacks.checkTransactionStatus.getPostData
		}
	}
	FvApis.checkTransactionStatus(data);
}
function mobilecheck(e) {
	var btn = $("#userupdatebtn");
	btn.prop("disabled", true);
	//$('#userupdatebtn').prop('disabled', true);
	var msisdn = $('#mobileNumber').val();
	var postData = {};
	postData['msisdn'] = msisdn;
	$.ajax({
		type : "GET",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + "guest/preSignupValidation",
		success : function(msg) {
			if (msg.code == '200') {
				$('#userupdatebtn').prop('disabled', false);
			} else if (data.code == '504') {
				Util.redirectToIndex();
			} else if (msg.code == '502') {
				Util.alert_message('#alert_template', "Mobile Number already exist.");
			}
		},
	});
}

/*
 function getAllPricingPlans() {

 var userDataHtml = '';
 $.ajax({
 type : "GET",
 async : false,
 url : FvConsts.apiBaseUrl + "pay/getAllPricingPlans",
 success : function(data) {
 if (data.code == '200') {
 finalData = data.data;
 var newData = {};
 var temparr = [];
 var temparr1 = [];
 $('#event_dropdown').append('<option value=" " class="placeholder_color" disabled selected >Select</option>');
 for (var i = 0; i < finalData.length; i++) {
 if (finalData[i].type == 'SUBSCRIPTION') {
 temparr.push(finalData[i]);
 } else {
 temparr1.push(finalData[i]);
 }
 newData.SUBSCRIPTION = temparr;
 newData.EVENT = temparr1;

 }
 for (i in newData) {
 $('#event_dropdown').append('<option value="' + i + '" class="otherSelectOptions">' + i + '</option>');
 }
 FvVariables.payflowJSONObject = newData;

 //console.log("in pay flow newData  : ************************** " + JSON.stringify(newData));
 userDataHtml += '<div class="form-group">';
 $.each(newData.EVENT, function(index, value) {
 userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
 userDataHtml += '<input type="radio" planId="' + value.id + '" planName="' + value.name + '" planAmount="' + value.amount + '" planType="EVENT" name="PLANS" class="" id="EVENT_' + value.id + '" style="float:left;">';
 userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
 userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
 userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
 userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
 userDataHtml += '</table></div></br>';
 });
 userDataHtml += '</div></br>';
 $('#allPricingPlan').html(userDataHtml);

 userDataHtml += '<div class="form-group">';
 $.each(newData.SUBSCRIPTION, function(index, value) {
 userDataHtml += '<input type="hidden" id="Id' + value.id + '" value="' + value.id + '"></input>';
 userDataHtml += '<input type="radio" planId="' + value.id + '" planName="' + value.name + '" planAmount="' + value.amount + '" planType="SUBSCRIPTION" planDays="' + value.expiryInDays + '" name="PLANS" class="" id="SUBSCRIPTION_' + value.id + '" style="float:left;">';
 userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
 userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
 userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
 userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
 userDataHtml += '</table></div></div></br>'

 });
 userDataHtml += '</div>';
 $('#allPricingPlan').html(userDataHtml);

 $('input[name=PLANS]').on('click', function(e) {
 var sessionId = Util.getCookie(CookieNames()['sessionId']);
 var userId = Util.getCookie(CookieNames()['userId']);
 var customerId = Util.getCookie(CookieNames()['customerId']);
 var planId = $(e.target).attr('planId');
 $('#enteredAmount').attr('readonly', false);
 $('#enteredAmount').prop('readonly', false);
 $('#minimumAmount').val($(e.target).attr('planAmount'));
 $('#enteredAmount').val($(e.target).attr('planAmount'));
 if ($(e.target).attr('planType') == 'SUBSCRIPTION') {
 $('#enteredAmount').attr('readonly', true);
 $('#enteredAmount').prop('readonly', true);
 }
 $('#enteredAmount').trigger('blur');
 var postData = {};
 postData['sessionId'] = sessionId;
 postData['userId'] = userId;
 postData['customerId'] = customerId;
 postData['planId'] = planId;
 $.ajax({
 type : "POST",
 data : postData,
 async : false,
 url : FvConsts.apiBaseUrl + "pay/subscribePlan",
 success : function(data) {
 if (data.code == '200') {
 getPlanActiveStatus();
 } else if (data.code == '504') {
 Util.redirectToIndex();
 } else {
 Util.alert_message('#alert_template', "some error found.");
 }
 },
 });
 });
 } else if (data.code == '504') {
 Util.redirectToIndex();
 } else {
 Util.alert_message('#alert_template', "Find some error.");
 }
 },
 });
 }*/

function getallCountryInfo() {
	$.ajax({
		type : "GET",
		async : false,
		url : FvConsts.apiBaseUrl + "pay/getPaymentSupportedCountries",
		success : function(data) {
			if (data.code == '200') {
				var country = data.data;
				//$('#selectCountry').append('<option value=" " class="placeholder_color"  disabled selected>Select</option>');
				for (var i = 0; i < country.length; i++) {
					$('#selectCountry').append('<option class="otherSelectOptions" value="' + country[i].id + '" >' + country[i].countryName + '</option>');
					/*$('#selectCountry').append($('<option>', {
					 value : country[i].id,
					 text : '' + country[i].countryName
					 }));*/
				}
			} else {
				Util.alert_message('#alert_template', "some error found.");
			}
		},
	});
}

function getPaymentHistory() {
	$(".se-pre-con").css("display", "block");
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var customerId = Util.getCookie(CookieNames()['customerId']);
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	postData['customerId'] = customerId;
	$.ajax({
		type : "POST",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + "/pay/getHistory",
		success : function(data) {
			if (data.code == '200') {
				var finalData = data.data;
				var el = '#tbPaymentDetails';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();

				for (var i = 0; i < finalData.length; i++) {
					var time = finalData[i]["createdTime"];
					var d = new Date(time);
					dTable.fnAddData([Util.getFormattedDate(time), Util.getFormattedTime(time), finalData[i]['finalAmount'] + " " + finalData[i]["currencyType"], finalData[i]['pricingPlanName'], '<a href="' + FvConsts.apiBaseUrl + 'pdf/demo?txId=' + finalData[i]['id'] + '" target="_blank" >download</a>', finalData[i]['promoCode'], finalData[i]['finalCredits'], finalData[i]['pgTxId']]);
				}

			} else if (data.code == '504') {
				Util.redirectToIndex();
			} else {
				Util.alert_message('#alert_template', "some error found.");
			}
			$(".se-pre-con").css("display", "none");
		},
	});
};

/*
 * Check for active plan and display it accordingly on myWallet and payflow screen.
 */
function getPlanActiveStatus() {
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var customerId = Util.getCookie(CookieNames()['customerId']);
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	postData['customerId'] = customerId;
	$.ajax({
		type : "POST",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + "/pay/getActivePlan",
		success : function(data) {
			if (data.code == '200') {
				finalData = data.data;
				//console.log("JSON finalData : " + JSON.stringify(finalData));
				withPaymentSuccessCode200(finalData);
			} else if (data.code == '504') {
				Util.redirectToIndex();
			} else {
				Util.alert_message('#alert_template', "some error found.");
			}
		},
	});
};

withPaymentSuccessCode200 = function(finalData) {
	if (Util.isDefined(finalData[0])) {
		$('#getPlan').html(finalData[0].name);
		if (Util.isDefined(FvVariables.payflowJSONObject)) {
			for (i in FvVariables.payflowJSONObject) {
				$('#expiryInDays').val(finalData[0].expiryInDays);
				var variable = finalData[0].type;
				var booleanCheck = (i == variable && variable == 'SUBSCRIPTION');
				if (booleanCheck) {
					$('#subscriptionPlan').append('<option value="" disabled >Select</option>');
					$.each(FvVariables.payflowJSONObject[i], function(index, value) {
						$('#subscriptionPlan').append('<option value="' + value.id + '">' + value.name + '</option>');
						if (value.name == finalData[0].name) {
							$('#subscriptionPlan').val(value.id);
							var userDataHtml = '<div id="userDataHtml" class="form-group">';
							userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
							userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
							userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
							userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
							userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
							userDataHtml += '</table></div></br>';
							$('#multiple_subscription_dropdown').html(userDataHtml);
							populatePayflowStep3('subscription', value);
							setTimeout(function() {
								$('#multiple_subscription_dropdown1').css('display', 'block');
								$('#multiple_subscription_dropdown').css('display', 'block');
							}, 100);
						}

					});

					$('#event_dropdown').val(finalData[0].type);
					$('#multiple_subscription_dropdown1').css('display', 'block');
					$('#multiple_subscription_dropdown').css('display', 'none');

				} else if (i == variable) {
					$.each(FvVariables.payflowJSONObject[i], function(index, value) {
						$('#event_dropdown').val(finalData[0].type);
						$('#subscriptionPlan').empty();
						var userDataHtml = '<div id="userDataHtml" class="form-group">';
						userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
						userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
						userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
						userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
						userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
						userDataHtml += '</table></div></br>';
						$('#multiple_subscription_dropdown1').css('display', 'none');
						$('#multiple_subscription_dropdown').css('display', 'block');
						$('#multiple_subscription_dropdown').html(userDataHtml);
						// populate Amount and promo code text fields
						populatePayflowStep3('event', value);
					});
				}
			}
		}
	} else {
		$('#getPlan').html("None");
	}
};

populatePayflowStep3 = function(planType, value) {
	//$('#minimumAmount').val(planData.amount);
	//$('#finalPaybleAmount').val(planData.amount);
	if (planType == 'event') {
		$('#enteredAmount').attr('readonly', false);
		$('#enteredAmount').prop('readonly', false);
		$('#enteredAmount').attr('disabled', false);
		$('#enteredAmount').prop('disabled', false);
		$('#enteredAmount,#finalPaybleAmount').val('');
		$('#minimumAmount').val(value.amount);
		$('#finalCreditsAlloted').val('');

	} else {
		$('#enteredAmount').attr('readonly', true);
		$('#enteredAmount').prop('readonly', true);
		$('#enteredAmount').attr('disabled', true);
		$('#enteredAmount').prop('disabled', true);
		$('#enteredAmount,#minimumAmount,#finalPaybleAmount').val(value.amount);
		//var credit = parseInt(value.amount) / ((value.amount / value.credits).toFixed(2));
		//$('#finalCreditsAlloted').val(credit);
		//FvVariables.pricePerWallet = (value.amount / value.credits).toFixed(2);
	}
	var guiDataBlur = {
		callback : FvApiCallbacks.payamentInitiated.success,
		formId : "paypalForm",
		paypalAmountFieldId : "paypalAmount",
		finalPaybleField : "finalPaybleAmount",
		finalCreditsAllotedField : "finalCreditsAlloted",
		validate : FvApiCallbacks.payamentInitiated.validate
	};

	// Change final amount and credit field as per amount entered.
	var guiData = {
		guiData : guiDataBlur,
		getPostData : FvApiCallbacks.payamentInitiated.getPostData
	};
	FvApis.payamentInitiated({
		data : guiData
	});
};

function getAllPricingPlansForPayment() {
	$.ajax({
		type : "GET",
		async : false,
		url : FvConsts.apiBaseUrl + "pay/getAllPricingPlans",
		success : function(data) {
			if (data.code == '200') {
				finalData = data.data;
				var newData = {};
				var temparr = [];
				var temparr1 = [];
				$('#event_dropdown').append('<option value=" " class="placeholder_color" disabled selected >Select</option>');
				for (var i = 0; i < finalData.length; i++) {
					if (finalData[i].type == 'SUBSCRIPTION') {
						temparr.push(finalData[i]);
					} else {
						temparr1.push(finalData[i]);
					}
					newData.SUBSCRIPTION = temparr;
					newData.EVENT = temparr1;
				}
				for (i in newData) {
					$('#event_dropdown').append('<option value="' + i + '" class="otherSelectOptions">' + i + '</option>');
				}
				FvVariables.payflowJSONObject = newData;
				//console.log("in pay flow newData  : ************************** " + JSON.stringify(newData));
			}
		}
	});
};

onPlanChange = function(event) {
	if (Util.isDefined(FvVariables.payflowJSONObject)) {
		for (i in FvVariables.payflowJSONObject) {
			var variable = $('#' + event.target.id).val();
			var booleanCheck = (i == variable && variable == 'SUBSCRIPTION');
			if (booleanCheck) {
				$('#subscriptionPlan').append('<option value="" disabled selected>Select</option>');
				$.each(FvVariables.payflowJSONObject[i], function(index, value) {
					$('#subscriptionPlan').append('<option value="' + value.id + '">' + value.name + '</option>');
				});
				$('#event_dropdown').val(variable);
				$('#multiple_subscription_dropdown1').css('display', 'block');
				$('#multiple_subscription_dropdown').css('display', 'none');
			} else if (i == variable) {
				$.each(FvVariables.payflowJSONObject[i], function(index, value) {
					$('#event_dropdown').val(variable);
					$('#subscriptionPlan').empty();
					var userDataHtml = '<div id="userDataHtml" class="form-group">';
					userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
					userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
					userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
					userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
					userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
					userDataHtml += '</table></div></br>';
					$('#multiple_subscription_dropdown1').css('display', 'none');
					$('#multiple_subscription_dropdown').css('display', 'block');
					$('#multiple_subscription_dropdown').html(userDataHtml);
					// populate Amount and promo code text fields
					populatePayflowStep3('event', value);
				});
			}
		}
	}
};
initMyWalletProceed = function() {
	$("#Payasyougo").on('click', function() {
		$("#doller99").prop("checked", false);
		$("#doller250").prop("checked", false);
		$("#doller500").prop("checked", false);
		$("#doller1000").prop("checked", false);
	});
	$("#afterLogin").append(dynamichtml.topnavafterlogin);
	$("#afterloginfooter").append(dynamichtml.footernavdirafterlogin);
	$("#_myaccount").addClass('activenav');
	myWalletonload();
	//getAllPricingPlans();
	getAllPricingPlansForPayment();
	getPlanActiveStatus();
	$('#event_dropdown').change(function(event) {
		var current = $('#event_dropdown').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#event_dropdown').css('color', '#6C265C !important');
		} else {
			$('#event_dropdown').css('color', '#ccc');
		}
		onPlanChange(event);
	});

	//on click of slected subscriptionPlan, display respective details.
	$('select#subscriptionPlan').change(function(ev) {
		for (i in FvVariables.payflowJSONObject) {
			var variable = $('#event_dropdown').val();
			var booleanCheck = (i == variable && variable == 'SUBSCRIPTION');
			if (booleanCheck) {
				var selectedsubscriptionPlan = $('#subscriptionPlan').val();
				$.each(FvVariables.payflowJSONObject[i], function(index, value) {
					if (selectedsubscriptionPlan == value.id) {
						var userDataHtml = '<div id="userDataHtml" class="form-group">';
						userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
						userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
						userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
						userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
						userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
						userDataHtml += '</table></div></br>';
						$('#multiple_subscription_dropdown1').css('display', 'block');
						$('#multiple_subscription_dropdown').css('display', 'block');
						$('#multiple_subscription_dropdown').html(userDataHtml);

					}
				});
			}
		}
	});

	$('#subscribePlan').on('click', function() {
		var sessionId = Util.getCookie(CookieNames()['sessionId']);
		var userId = Util.getCookie(CookieNames()['userId']);
		var customerId = Util.getCookie(CookieNames()['customerId']);
		var planId = 0;
		if ($('#event_dropdown').val() == 'EVENT') {
			planId = $('#IdPlan').val();
		} else {
			planId = $('#subscriptionPlan').val();
		}
		var postData = {};
		postData['sessionId'] = sessionId;
		postData['userId'] = userId;
		postData['customerId'] = customerId;
		postData['planId'] = planId;
		$.ajax({
			type : "POST",
			data : postData,
			async : false,
			url : FvConsts.apiBaseUrl + "pay/subscribePlan",
			success : function(data) {
				if (data.code == '200') {
					location.href = 'pay-flow.html';
				} else if (data.code == '504') {
					Util.redirectToIndex();
				} else {
					Util.alert_message('#alert_template', "some error found.");
				}
			},
		});

	});

};

/*
 * Initiate all the event trigger on pay-flow screen
 */
initPayflow = function() {
	Util.checkSession();
	Util.checkGuestSession();
	//validate amount field on change.
	$('#enteredAmount').keyup(function() {
		if ($("#enteredAmount").val() == "") {
			FvVariables.errorMessage = "Please enter the correct amount.";
			Util.displayErrorMessage(document.getElementById('enteredAmount'));
			//Util.alert_message('#alert_template', 'Please enter a valid amount.');
			return true;
		}
		var enteredAmount = parseInt($("#enteredAmount").val());
		var minimumAmount = parseInt($("#minimumAmount").val());
		if (enteredAmount < minimumAmount) {
			FvVariables.errorMessage = 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.';
			Util.displayErrorMessage(document.getElementById('enteredAmount'));
			//Util.alert_message('#alert_template', 'Please enter an amount greater than or equal to $ ' + $('#minimumAmount').val() + '.');
			return true;
		}
		/*$('#finalPaybleAmount').val($("#enteredAmount").val());
		 var credit=parseInt($("#enteredAmount").val())/(($("#minimumAmount").val()/FvVariables.pricePerWallet).toFixed(2));
		 $('#finalCreditsAlloted').val(credit);*/
		Util.resetAllErrorMessage(document.getElementsByTagName('INPUT'));
	});

	var guiData = {
		callback : FvApiCallbacks.paymentApi.success,
		formId : "paypalForm",
		subFormId : "paypalSubscriptionForm",
		paypalAmountFieldId : "paypalAmount",
		paypalFirstName : "paypalFirstName",
		paypalLastName : "paypalLastName",
		finalTxId : "finalTxId",
		paypalItem : "paypalItem",
		paypalFvTxId : "paypalFvTxId",
		validate : FvApiCallbacks.paymentApi.validate
	};
	// on click of proceed to payment button.
	$("#paypalButton").on('click', {
		guiData : guiData,
		getPostData : FvApiCallbacks.paymentApi.getPostData
	}, FvApis.saveInitialTransaction);

	getallCountryInfo();
	getAllPricingPlansForPayment();
	getPlanActiveStatus();
	$.get("http://ipinfo.io", function(response) {
		if (response.country == 'IN') {
			$('#payflow_forindia_text').append(FvAlerts.PAY_FLOW_TEXT);
		} else {
			//do nothing
		}
	}, "jsonp");
	var guiDataBlur = {
		callback : FvApiCallbacks.payamentInitiated.success,
		formId : "paypalForm",
		paypalAmountFieldId : "paypalAmount",
		finalPaybleField : "finalPaybleAmount",
		finalCreditsAllotedField : "finalCreditsAlloted",
		validate : FvApiCallbacks.payamentInitiated.validate
	};

	// Change final amount and credit field as per amount entered.
	$("#enteredAmount").on('blur', {
		guiData : guiDataBlur,
		getPostData : FvApiCallbacks.payamentInitiated.getPostData
	}, FvApis.payamentInitiated);
	// Change final amount and credit field as per promocode entered
	$("#enteredPromoCode").on('change', {
		guiData : guiDataBlur,
		getPostData : FvApiCallbacks.payamentInitiated.getPostData
	}, FvApis.payamentInitiated);

	$('#event_dropdown').change(function() {
		var current = $('#event_dropdown').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#event_dropdown').css('color', '#6C265C !important');
		} else {
			$('#event_dropdown').css('color', '#ccc');
		}
	});
	$('#selectCountry').change(function() {
		var current = $('#selectCountry').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#selectCountry').css('color', '#6C265C !important');
		} else {
			$('#selectCountry').css('color', '#ccc');
		}
	});

	//on click of slected subscriptionPlan, display respective details.
	$('select#subscriptionPlan').change(function(ev) {
		for (i in FvVariables.payflowJSONObject) {
			var variable = $('#event_dropdown').val();
			var booleanCheck = (i == variable && variable == 'SUBSCRIPTION');
			if (booleanCheck) {
				var selectedsubscriptionPlan = $('#subscriptionPlan').val();
				$.each(FvVariables.payflowJSONObject[i], function(index, value) {
					if (selectedsubscriptionPlan == value.id) {
						var userDataHtml = '<div id="userDataHtml" class="form-group">';
						userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
						userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
						userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
						userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
						userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
						userDataHtml += '</table></div></br>';
						$('#multiple_subscription_dropdown1').css('display', 'block');
						$('#multiple_subscription_dropdown').css('display', 'block');
						$('#multiple_subscription_dropdown').html(userDataHtml);
						populatePayflowStep3('subscription', value);
					}
				});
			}
		}
	});
	//on click of slected plan(EVENT/SUBSCRIPTION), display respective details.
	$('select#event_dropdown').change(function(ev) {
		if (Util.isDefined(FvVariables.payflowJSONObject)) {
			for (i in FvVariables.payflowJSONObject) {
				var variable = $('#' + ev.target.id).val();
				var booleanCheck = i == variable && variable == 'SUBSCRIPTION';
				if (booleanCheck) {
					$('#subscriptionPlan').append('<option value="" disabled selected>Select</option>');
					$.each(FvVariables.payflowJSONObject[i], function(index, value) {
						$('#subscriptionPlan').append('<option value="' + value.id + '">' + value.name + '</option>');
					});
					$('#multiple_subscription_dropdown1').css('display', 'block');
					$('#multiple_subscription_dropdown').css('display', 'none');
				} else if (i == variable) {
					$.each(FvVariables.payflowJSONObject[i], function(index, value) {
						$('#subscriptionPlan').empty();
						var userDataHtml = '<div id="userDataHtml" class="form-group">';
						userDataHtml += '<input type="hidden" id="IdPlan" value="' + value.id + '"></input>';
						userDataHtml += '<strong class="labeltext">&nbsp;' + value.name + '</strong>';
						userDataHtml += '<div class="clearfix" id="clearfix2"><div class="payment-table"><table class="table"><tr>';
						userDataHtml += '<td>Minimum Payment :</td><td><label class="color-main1">$' + value.amount + '</label></td></tr>';
						userDataHtml += '<tr><td>Price per credit:</td><td><label class="color-main1">$' + (value.amount / value.credits).toFixed(2) + ' per credit</label></td></tr>';
						userDataHtml += '</table></div></br>';
						$('#multiple_subscription_dropdown1').css('display', 'none');
						$('#multiple_subscription_dropdown').css('display', 'block');
						$('#multiple_subscription_dropdown').html(userDataHtml);

						// populate Amount and promo code text fields
						populatePayflowStep3('event', value);

					});
				}
			}
		}
	});

	var dataDefault = {
		data : {
			guiData : {
				callback : FvApiCallbacks.getVerReportDoneSoFarApi
			},
			getPostData : FvApiCallbacks.getVerReportDoneSoFarApi.getPostData
		}
	};
	FvApis.getVerificationDoneSoFar(dataDefault);
	$("#backButton").on('click', function() {
		window.location.href = document.referrer;
	});

};

initPaymentSuccess = function() {
	var credits = Util.getUrlParam("credits");
	$("#credits").html(credits);
	/*$("#logout").on('click', {
	 guiData : guiData,
	 getPostData : FvApiCallbacks.logoutApi.getPostData
	 }, FvApis.logout);*/
};
/*
 * Generic method used for Call flow change.
 * Onload it will fetch data and populate app Secret on Screen.
 */
fetchAllDemoApps = function(sessionId, userId, customerId) {
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	var getValue = $("#callflow option:selected").val();
	if (Util.isDefined(getValue)) {
		$('#appSecret').val('');
	}
	$.ajax({
		type : 'POST',
		data : postData,
		url : FvConsts.apiBaseUrl + "dashboard/getAllDemoApps",
		//url : FvConsts.apiBaseUrl + "user/getAllAppsForUser",
		success : function(data) {// callback method for further manipulations
			var responseCode = data.code;
			var finalData = data.data;
			if (responseCode == '200') {
				for (var i = 0; i < finalData.length; i++) {
					if (finalData[i].callFlowId == getValue) {
						var key = finalData[i].appSecret;
						var secret = finalData[i].appId;
						var endPoint = finalData[i].endPoint;
						FvVariables.appSecretKey = key;
						$('#appSecret').val(key);
					}
					FvVariables.endPoint[i] = {
						'callFlowId' : finalData[i].callFlowId,
						'endPt' : finalData[i].endPoint
					};
				}
			} else if (responseCode == '504') {
				Util.redirectToIndex();
			}
		},
		error : function(e) {// if error occured
			//alert('error');
		}
	});
};

/*
 * Initiated from Verification Request screen. This method submits the details on verification request screen.

 */
submitVerficationReqCall = function() {
	$('.se-pre-con').css('display', 'block');
	var url = "";
	var endpoint = "";
	//On click of submit button update the screen and show respective message
	$.each(FvVariables.endPoint, function(index, value) {
		if ($("#callflow option:selected").val() == value.callFlowId) {
			//console.log(FvConsts.trialApiBaseUrl + value.endPt);
			url = Util.isDefined(FvConsts.trialApiBaseUrl + (value.endPt)) ? FvConsts.trialApiBaseUrl + (value.endPt).toLowerCase() : '';
			endpoint = value.endPt;
		}
	});
	//console.log("url for submitVerification : " + url);
	postData = {};
	postData['customerId'] = $('#customerId').val();
	postData['isoCountryCode'] = $('#ddlCountry').val().toUpperCase();
	postData['msisdn'] = $('#number').val();
	postData['appKey'] = $('#appSecret').val();
	FvVariables.selectedCallFlow = $("#callflow option:selected").val();
	FvVariables.postDataForVerificationReq = postData;
	FvVariables.urlForVerificationReq = url;
	postRequestForSMS(postData, url, endpoint);
};

/*
 * Common method used for POST send SMS/Voice verificatioon messages.
 */
postRequestForSMS = function(postData, url, endpoint) {
	$.ajax({
		type : 'POST',
		data : postData,
		async : true,
		url : url,
		success : function(data) {
			// In case its a success sms delivery or message already exists code ie 506
			if (data.responseCode == 200) {
				// FvConsts.otpCountDown = Util.isDefined(data.timeout) ? 100 : FvConsts.otpCountDown;
				resetRequestResponseDiv(postData, data, url);

				if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
					FvVariables.currentScreen = 'fallBackSmsScreen';
					resetVerificationScreenDivCss('fallbackSmsScreenDiv');
					$("#fallbackSmsScreenDiv").load("fallback_sms.html");
				} else {
					if (endpoint == 'sms') {
						FvVariables.currentScreen = 'smsUpdateRequestScreen';
						resetVerificationScreenDivCss('smsUpdateScreenDiv');
						$("#smsUpdateScreenDiv").load("sms_update_request.html");
					} else if (endpoint == 'voice') {
						$("#voiceUpdateScreenDiv").load("voice_update_request.html");
						FvVariables.currentScreen = 'voiceUpdateRequestScreen';
						resetVerificationScreenDivCss('voiceUpdateScreenDiv');
						FvVariables.isDidCheck = true;
						FvVariables.didToBeDisplayed = Util.isDefined(data.assignedDID) ? data.assignedDID : '';
						var statusVal = FvAlerts.DID_MESSAGE.toString();
						$('#messageText').fadeIn('slow');
						$('#messageText').text(Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR);
						setTimeout(function() {
							$('#messageText').fadeOut(5000);
						}, 1900);
					} else {
						FvVariables.currentScreen = 'smsUpdateRequestScreen';
						resetVerificationScreenDivCss('smsUpdateScreenDiv');
						$("#smsUpdateScreenDiv").load("sms_update_request.html");
					}
				}

			} else if (data.responseCode == 504 || data.responseCode == 711) {
				Util.alert_message_verificatn_req('#alert_template_verifictn_req', Util.isDefined(data.errorMessage) ? data.errorMessage.indexOf("_") >= 0 ? data.errorMessage.replace(FvVariables.messageRegrex, " ") : data.errorMessage : FvAlerts.SYSTEM_ERROR);
				$('#alert_btn_div2').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
			} else if (data.responseCode == 506) {
				var statusVal = Util.isDefined(data.verificationStatus) ? data.verificationStatus.toString() : Util.isDefined(data.errorMessage) ? data.errorMessage.toString() : FvAlerts.SYSTEM_ERROR;
				$('#messageText').fadeIn('slow');
				$('#messageText').text((Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR) + ". PLEASE WAIT....");
				setTimeout(function() {
					$('#messageText').fadeOut(9000);
				}, 1000);
			} else {
				var statusVal = Util.isDefined(data.verificationStatus) ? data.verificationStatus.toString() : Util.isDefined(data.errorMessage) ? data.errorMessage.toString() : FvAlerts.SYSTEM_ERROR;
				$('#messageText').fadeIn('slow');
				$('#messageText').text(Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR);
				setTimeout(function() {
					$('#messageText').fadeOut(9000);
				}, 1000);
			}
			setTimeout(function() {
				alert("spinner stopped");
				$('.se-pre-con').css('display', 'none');
			}, 1500);
		},
		error : function(xhr, status, error) {// if error occured
			Util.alert_message_verificatn_req('#alert_template_verifictn_req', FvAlerts.SYSTEM_ERROR);
			$('#alert_btn_div2').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
			$('.se-pre-con').css('display', 'none');
		}
	});
};
/*
 * Method called on click of switch to fall back button from SMS Update request screen.
 * Navigate to Fallback SMS screen.
 */
onSwitchToFallbackCall = function() {
	$('.se-pre-con').css('display', 'block');
	FvVariables.currentScreen = 'fallBackSmsScreen';
	resetVerificationScreenDivCss('fallbackSmsScreenDiv');
	$("#fallbackSmsScreenDiv").load("fallback_sms.html");
	$('.se-pre-con').css('display', 'none');
};
/*
 * Reset visibility of included html to none first and then set the visible true for respective div(template html).
 * Works for Verification Request functionality.
 */
resetVerificationScreenDivCss = function(resetId) {
	$('#verificationRequestScreenDiv').css('display', 'none');
	$('#smsUpdateScreenDiv').css('display', 'none');
	$('#voiceUpdateScreenDiv').css('display', 'none');
	$('#fallbackSmsScreenDiv').css('display', 'none');
	//$('#verificationFailureScreenDiv').css('display', 'none');
	//$('#verificationSuccessScreenDiv').css('display', 'none');
	$('#' + resetId).css('display', 'block');
};

/*
 * Verify OTP request for SMS/Voice messages.
 */
verifySMSRequest = function() {
	$('.se-pre-con').css('display', 'block');
	updateVerificationRequest();
};

/*
 * Set/Reset value for Verification request and response div in right hand side panel.
 */
resetRequestResponseDiv = function(postData, data, url) {
	$('#verficationReqDetailsDiv, #verficationRespDetailsDiv').css('display', 'block');
	$('#verficationReqDetails').text('');
	$('#verficationRespDetails').text('');
	var postDataValue = "{";
	var responseData = "{ ";
	for (var key in postData) {
		currentVal = key + "=" + postData[key] + "&";
		postDataValue = postDataValue + currentVal;
	}
	postDataValue = postDataValue.substring(0, postDataValue.length - 2) + "}";
	for (var keyData in data) {
		currentVal = keyData + " : " + data[keyData] + " , ";
		responseData = responseData + currentVal;
	}
	responseData = responseData.substring(0, responseData.length - 2) + "}";
	postDataValue = 'curl "' + url + '" -X POST <br> --data "' + postDataValue + '"<br> --header "Content-Type: application/x-www-form-urlencoded"';

	$('#verficationReqDetails').append(postDataValue);
	$('#verficationRespDetails').append(responseData);
	FvVariables.verificationId = data.verificationId;
};

updateVerificationRequest = function() {
	var postData = {};
	postData['customerId'] = $('#customerId').val();
	postData['verificationId'] = FvVariables.currentScreen == 'smsUpdateRequestScreen' ? parseFloat($('#verificationIdSMS').val()) : (FvVariables.currentScreen == 'voiceUpdateRequestScreen' ? parseFloat($('#verificationIdVoice').val()) : parseFloat($('#verificationIdFallBack ').val()));

	if (FvVariables.isDidCheck == true) {
		if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
			postData['appKey'] = $('#appSecretVoice').val();
			postData['did'] = $('#didNoVoice').val();
		} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
			postData['appKey'] = $('#appSecretFallback').val();
			postData['did'] = $('#didFallback').val();
		}
	} else {
		if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
			postData['appKey'] = $('#appSecretSMS').val();
		} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
			postData['appKey'] = $('#appSecretFallback').val();
		}
		postData['code'] = FvVariables.currentScreen == 'smsUpdateRequestScreen' ? $('#enterOtp').val() : (FvVariables.currentScreen == 'voiceUpdateRequestScreen' ? $('#enterOtp').val() : $('#enterOtpFallback').val());

	}
	//console.log("postData : " + postData);
	$.ajax({
		type : 'GET',
		data : postData,
		async : true,
		url : FvConsts.trialApiBaseUrl + 'update',
		success : function(data) {// callback method for further manipulations
			//FvConsts.otpCountDown = Util.isDefined(data.timeout) ? FvConsts.otpCountDown : FvConsts.otpCountDown;
			resetRequestResponseDiv(postData, data, FvConsts.trialApiBaseUrl + 'update');
			// On successful verification code will be 200 and on successfully verified case code will be 703
			if (data.responseCode == 200 || data.responseCode == 703) {
				if (data.verificationStatus == 'VERIFICATION_COMPLETED' || data.verificationStatus == 'ALREADY_VERIFIED') {
					verificationReqTimerSetting.setVerificationReqTimer.clearAllInterval();
					verificationReqTimerSetting.setVerificationReqTimer.hideTimer();
					Util.alert_message_verificatn_req('#alert_template_verifictn_req', FvAlerts.SUCCESS_VERIFICATION);
					$('#alert_btn_div1').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
				}
			} else if (data.responseCode == 708 || data.responseCode == 709 || data.responseCode == 710 || data.responseCode == 708 || data.responseCode == 703 || data.responseCode == 702) {
				// In case of verification with error message code as mentioned above.
				var statusVal = data.verificationStatus.toString();
				$('#enterOtp').val('');
				$('#enterOtpFallback').val('');
				$('#messageText').fadeIn('slow');
				$('#messageText').text(Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR);
				setTimeout(function() {
					$('#messageText').fadeOut(5000);
				}, 1000);
			} else if (data.responseCode == 706 || data.responseCode == 705 || data.responseCode == 701) {
				// In case of immediate fallback case with error code 706- TRYING_FALLBACK_SMS_NOT_DELIVERED or 705 - 	TRYING_FALLBACK_SMS_DELIVERED.
				verificationReqTimerSetting.setVerificationReqTimer.hideTimer();
				if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
					// disable submit button and enable switch to fallback button
					// $("#smsUpdateSpan1").css("display", 'none');
					// $("#smsUpdateSpan2").css("display", 'block');
					//Check if next Screen on fallback is SMS or Voice
					if ((Util.isDefined(data.smsCLI) && data.smsCLI == 'VERIFY') || (Util.isDefined(data.smsCli) || data.smsCli == 'VERIFY')) {
						FvVariables.isDidCheck = false;
					} else if (Util.isDefined(data.didAssigned)) {
						FvVariables.isDidCheck = true;
						FvVariables.didToBeDisplayed = data.didAssigned;
					}
					//switch to fallback
					onSwitchToFallbackCall();
				} else if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
					// disable submit button and enable switch to fallback button
					// $("#voiceUpdateSpan1").css("display", 'none');
					// $("#voiceUpdateSpan2").css("display", 'block');
					//Check if next Screen on fallback is SMS or Voice

					if ((Util.isDefined(data.smsCLI) && data.smsCLI == 'VERIFY') || (Util.isDefined(data.smsCli) || data.smsCli == 'VERIFY')) {
						FvVariables.isDidCheck = false;
					} else if (Util.isDefined(data.didAssigned)) {
						FvVariables.isDidCheck = true;
						FvVariables.didToBeDisplayed = data.didAssigned;
					}
					//switch to fallback
					onSwitchToFallbackCall();
				} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {

					//Display message popup on screen
					Util.alert_message_verificatn_req('#alert_template_verifictn_req', FvAlerts.VERIFICATION_FAILED);
					// Show text message in popup.
					$('#alert_btn_div1').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
				}
				var statusVal = data.verificationStatus.toString();
				$('#messageText').fadeIn('slow');
				$('#messageText').text(Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR);
				setTimeout(function() {
					$('#messageText').fadeOut(5000);
				}, 1000);
			} else {
				verificationReqTimerSetting.setVerificationReqTimer.clearAllInterval();
				verificationReqTimerSetting.setVerificationReqTimer.hideTimer();
				var statusVal = Util.isDefined(data.verificationStatus) ? data.verificationStatus.toString() : (Util.isDefined(data.errorMessage) ? data.errorMessage.toString() : "");
				Util.alert_message_verificatn_req('#alert_template_verifictn_req', Util.isDefined(statusVal) ? statusVal.indexOf("_") >= 0 ? statusVal.replace(FvVariables.messageRegrex, " ") : statusVal : FvAlerts.SYSTEM_ERROR);
				$("#btn_funct_text").html(FvAlerts.VERIFICATION_OK_TEXT);
				$('#alert_btn_div2').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
			}
			setTimeout(function() {
				$('.se-pre-con').css('display', 'none');
			}, 1000);
		},
		error : function(xhr, status, error) {// if error occured
			$('#verficationReqDetails').append('');
			$('#verficationRespDetails').append('');
			verificationReqTimerSetting.setVerificationReqTimer.clearAllInterval();
			verificationReqTimerSetting.setVerificationReqTimer.hideTimer();
			Util.alert_message_verificatn_req('#alert_template_verifictn_req', Util.isDefined(error.errorMessage) ? error.errorMessage.indexOf("_") >= 0 ? error.errorMessage.replace(FvVariables.messageRegrex, " ") : error.errorMessage : FvAlerts.SYSTEM_ERROR);
			$("#btn_funct_text").html(FvAlerts.VERIFICATION_OK_TEXT);
			$('#alert_btn_div2').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
			// onSwitchToFallbackCall();
			$('.se-pre-con').css('display', 'none');
		}
	});
};

/*
 * method calling for timer functionality on Verification request pages.
 * 1. This include timer to be shown/hide ie 90 secs
 * 2. timer for update request ie after 30sec that fetch from DB
 * 3. Check for timer displayed timeout.
 */
verificationReqTimerSetting = function() {
	return {
		setVerificationReqTimer : {
			showTimer : function() {
				if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
					$('#countDownSMS').show();
				} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
					$('#countDownFallBack').show();
				} else if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
					$('#countDownVoice').show();
				}
			},
			startTimer : function(sec) {
				//console.log("startTimer enter");
				FvVariables.intervalTimer = setInterval(function() {
					var mi = Math.floor(sec / 60);
					if (mi.toString().length == 1) {
						mi = '0' + mi;
					}

					var ss = sec % 60;

					if (ss.toString().length == 1) {
						ss = '0' + ss;
					}
					verificationReqTimerSetting.setVerificationReqTimer.showTimer();
					if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
						Util.isDefined($('#countDownSMS')) ? $('#countDownSMS').text(mi + ':' + ss) : '';
					} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
						Util.isDefined($('#countDownFallBack')) ? $('#countDownFallBack').text(mi + ':' + ss) : '';
					} else if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
						Util.isDefined($('#countDownVoice')) ? $('#countDownVoice').text(mi + ':' + ss) : '';
					}
					sec--;
					if (sec == -1) {
						clearInterval(FvVariables.intervalTimer);
						FvVariables.intervalTimer = null;
					}
				}, 1000);
			},
			checkForTimeout : function() {
				FvVariables.intervalForTimeout = setInterval(function() {
					if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
						if ($('#countDownSMS').text() == '00:00') {
							$('#waiting_text').text('WAITING....');
							// $("#smsUpdateSpan2").css("display", 'block');
							// clearInterval(FvVariables.intervalForTimeout);
							// FvVariables.intervalForTimeout = null;
							// onSwitchToFallbackCall();

						}
					} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
						if ($('#countDownFallBack').text() == '00:00') {
							$('#waiting_text').text('WAITING....');
							// clearInterval(FvVariables.intervalForTimeout);
							// FvVariables.intervalForTimeout = null;
							// Util.alert_message_verificatn_req('#alert_template_verifictn_req', FvAlerts.VERIFICATION_FAILED);
							// $('#alert_btn_div1').removeClass('disable_popup_btns_verif_req').addClass('enable_popup_btns_verif_req');
						}
					} else if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
						if ($('#countDownVoice').text() == '00:00') {
							$('#waiting_text').text('WAITING....');
							// $("#voiceUpdateSpan2").css("display", 'block');
							// clearInterval(FvVariables.intervalForTimeout);
							// FvVariables.intervalForTimeout = null;
							// onSwitchToFallbackCall();
						}
					}
				}, 1000);
			},
			startUpdateReqTimer : function() {
				var timer = FvVariables.otpUpdateTimer * 1000;
				FvVariables.intervalForUpdateReq = setInterval(function() {
					//console.log("in start updatereqTimer : " + FvVariables.otpUpdateTimer);
					//console.log("in start updatereqTimer  FvConsts.otpCountDown : " + FvConsts.otpCountDown);
					if (FvVariables.otpUpdateTimer == FvConsts.otpCountDown) {
						//console.log("entered fallback cond when sec over **************************");
						clearInterval(FvVariables.intervalForUpdateReq);
						FvVariables.intervalForUpdateReq = null;
					} else {
						//console.log("send update request after every 20 sec or as provided by DB");
						//console.log("**************** GOing FOR update ********************");
						updateVerificationRequest();
					}
				}, timer);
			},
			hideTimer : function() {
				if (FvVariables.currentScreen == 'smsUpdateRequestScreen') {
					$('#countDownSMS').css('display', 'none');
				} else if (FvVariables.currentScreen == 'fallBackSmsScreen') {
					$('#countDownFallBack').css('display', 'none');
				} else if (FvVariables.currentScreen == 'voiceUpdateRequestScreen') {
					$('#countDownVoice').css('display', 'none');
				}
			},
			clearAllInterval : function() {
				FvVariables.isDidCheck = false;
				clearInterval(FvVariables.intervalTimer);
				FvVariables.intervalTimer = null;
				clearInterval(FvVariables.intervalForTimeout);
				FvVariables.intervalForTimeout = null;
				clearInterval(FvVariables.intervalForUpdateReq);
				FvVariables.intervalForUpdateReq = null;
			}
		}
	};
}();

/*
 * set timer of all sort for Fallback SMS/Voice and Update SMS/Voice
 */
initTimerForVerificationReq = function() {
	//console.log("initTimerForVerificationReq enter");
	clearInterval(FvVariables.intervalTimer);
	FvVariables.intervalTimer = null;
	clearInterval(FvVariables.intervalForTimeout);
	FvVariables.intervalForTimeout = null;
	clearInterval(FvVariables.intervalForUpdateReq);
	FvVariables.intervalForUpdateReq = null;
	$('#waiting_text').text("");
	verificationReqTimerSetting.setVerificationReqTimer.startTimer(FvConsts.otpCountDown);
	verificationReqTimerSetting.setVerificationReqTimer.startUpdateReqTimer(FvConsts.otpCountDown);
	setTimeout(function() {
		verificationReqTimerSetting.setVerificationReqTimer.checkForTimeout();
	}, 2000);
	FvApis.getGuestDetails({
		data : {
			guiData : {
				callback : FvApiCallbacks.getGuestDetailsApi.success
			},
			getPostData : FvApiCallbacks.getGuestDetailsApi.getPostData
		}
	});
	//console.log("initTimerForVerificationReq exit");
};

/*
 * On load of verification Report fetch the details for last 1 year and display the chart.
 */
fetchDefaultChart = function() {
	$('.se-pre-con').css('display', 'block');
	//Fetch current and last year same date as current date
	var fdate = Util.getCurrentOrLastYearDate('lastMonth');
	var tdate = Util.getCurrentOrLastYearDate('currentMonth');
	var groupby = 'App';
	// fetch All Apps Including Deleted User and set in an array
	var appSelectedList = Util.isDefined(FvVariables.getAllAppsIncludingDeletedForUserData) ? FvVariables.getAllAppsIncludingDeletedForUserData.data : null;
	var appSelectedListpostparam = [];
	if (Util.isDefined(appSelectedList)) {
		for (var i = 0; i < appSelectedList.length; i++) {
			appSelectedListpostparam.push(appSelectedList[i].appId);
		}
	} else {
		alert("No App found.");
		return;
	}
	appSelectedListpostparam = appSelectedListpostparam.join(',');

	// fetch country as per selected APPS ie All Apps Including Deleted User and set in an array
	var ccList = [];
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	var accountId = Util.getCookie(CookieNames()['customerId']);
	var reportName = 'CustomerCountryList';
	var postData = {};
	postData['sessionId'] = sessionId;
	postData['userId'] = userId;
	postData['reportName'] = reportName;
	postData['customerId'] = accountId;
	postData['appIdList'] = appSelectedListpostparam;
	$.ajax({
		type : "GET",
		data : postData,
		async : false,
		url : FvConsts.apiBaseUrl + 'analytics/countryInfo',
		success : function(data) {
			var responseCode = data.headers.responseCode;
			var isoCC = [];
			countryName = [];
			if (responseCode == '200') {
				$('#vrcountry').empty();
				var finalData = data.body.reportData;
				for (var i = 0; i < finalData.length; i++) {
					if (finalData[i].appName && finalData[i].countryInfo) {
						var appName = finalData[i].appName;
						var countryInfo = finalData[i].countryInfo;
						for (var k = 0; k < countryInfo.length; k++) {
							if (countryInfo[k].countryName) {
								countryName.push(countryInfo[k].countryName);
								isoCC.push(countryInfo[k].isoCC);
							}
						}
					}
				}
				var uniqueCountry = countryName.filter(function(itm, i, countryName) {
					return i == countryName.indexOf(itm);
				});
				var uniqueIsocc = isoCC.filter(function(itm, i, isoCC) {
					return i == isoCC.indexOf(itm);
				});
				for (var j = 0; j < uniqueCountry.length; j++) {
					//console.log("uniqueCountry[j] ************* : " + uniqueCountry[j]);
					$('#vrcountry').append('<option value="' + uniqueIsocc[j] + '">' + uniqueCountry[j] + '</option>');
				}
				$("#vrcountry").multiselect("destroy").multiselect({
					nonSelectedText : "Country",
					enableCaseInsensitiveFiltering : true,
					includeSelectAllOption : true,
					allSelectedText : 'All Countries',
				});

				var ccListpostparam = "";
				if (isoCC) {
					for (var i = 0; i < isoCC.length; i++) {
						ccListpostparam += isoCC[i] + ",";
					}
				}
				// Fetch verification reports from all the above fetched default data.
				var sessionId = Util.getCookie(CookieNames()['sessionId']);
				var userId = Util.getCookie(CookieNames()['userId']);
				var customerId = Util.getCookie(CookieNames()['customerId']);
				var tz = Util.getCookie(CookieNames()['timeZone']);
				var repName = 'verifications';
				var postData = {
					sessionId : sessionId,
					userId : userId,
					reportName : 'verificationReport',
					customerId : customerId,
					appIdList : appSelectedListpostparam,
					timeZone : tz,
					countryList : ccListpostparam,
					startDate : fdate,
					endDate : tdate,
					groupBy : groupby,
					limit : '-1',
					offset : '0'
				};

				var configData = {
					tableid : 'tblVerRept',
					type : 'Monthly'/*NOTE: only for test*/,
					callback : FvApiCallbacks.getVerReportApi.success
				};
				var dataDefault = {
					data : {
						guiData : configData,
						getPostData : postData
					}
				};
				//Show Highchart if the response code is 200
				showDefaultChart(dataDefault, postData);
				populateDefaultValue(fdate, tdate);
			} else if (data.headers.responseCode == 404) {
				data.headers.responseMessage = FvAlerts.VERIFICATION_REPORT_COUNTRY_NULL;
				var el = '#' + 'tableid';
				$(el).css('min-height', '100');
				var dTable = $(el).dataTable({
					"pageLength" : 10,
					"retrieve" : true
				});
				dTable.fnClearTable();
				emptyHighChart(data);
				for (var i = 0; i < data.length; i++) {
					dTable.fnAddData([data[i]["groupFieldName"], data[i]["verificationsRequest"], data[i]["successfullyVerifications"], data[i]["successPercent"]]);
				}
				populateDefaultValue(fdate, tdate);
				$('#vrcountry').empty();
				$('#vrcountry').multiselect("destroy").multiselect({
					nonSelectedText : "Country",
					enableCaseInsensitiveFiltering : true,
					includeSelectAllOption : false,
					allSelectedText : 'none',
				});
				$("#vrcountry").multiselect('selectAll', false);
				$("#vrcountry").multiselect('updateButtonText');
			}
		}
	});
};
/*
 * Display high chart on load of Verification Report screen if response from API is success.
 */
showDefaultChart = function(dataDefault, postData) {
	$.ajax({
		type : "GET",
		data : postData,
		url : FvConsts.apiBaseUrl + 'analytics/verifications',
		success : function(msg) {
			FvApiCallbacks.getVerReportApi.success(dataDefault.data.guiData, msg);
			$('.se-pre-con').css('display', 'none');
		},
		error : function(msg) {
			console.error("Unexpected error, please try later");
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
			$('.se-pre-con').css('display', 'none');
		}
	});
};

/*
 * clear the high chart build when the response code is not 200 for verification report success.
 * getVerReportApi.success calls this method.
 */
emptyHighChart = function(report) {
	chart = $('#container').highcharts({
		title : {
			text : report.headers.responseMessage + ".",
			style : {
				'font-size' : '20px',
				'padding' : '16px',
				'color' : '#6C265C !important'
			},
			align : "center",
			verticalAlign : "middle",
			x : 0,
			y : 0
		},
		subtitle : {
			text : ''
		},
		loading : {
			hideDuration : 100
		},
		lang : {
			noData : report.headers.responseMessage
		},
		noData : {
			useHTML : true
		}
	});

};
/*
 * Populate data in verification form with default values on page load
 */
populateDefaultValue = function(fdate, tdate) {
	$('#groupby').val("App");
	$('#fromdate').val(fdate);
	$('#todate').val(tdate);
	$('#appnamemanageapp').multiselect({
		includeSelectAllOption : true,
		allSelectedText : 'All Apps'
	});

	$("#appnamemanageapp").multiselect('selectAll', false);
	$("#appnamemanageapp").multiselect('updateButtonText');

	$('#vrcountry').multiselect({
		nonSelectedText : "Country",
		enableCaseInsensitiveFiltering : true,
		includeSelectAllOption : true,
		allSelectedText : 'All Countries',
	});
	$("#vrcountry").multiselect('selectAll', false);
	$("#vrcountry").multiselect('updateButtonText');
};
/*
 * Method added to export Verification report in PDF and CSV format only.
 */
downloadVerificationReport = function(event) {
	var radioValue = $("input[name='e']:checked").val();
	if (radioValue == 1) {
		$(event.target).removeAttr('href target download');
		var data = $("#tblVerRept").tableExport({
			type : 'json',
			escape : 'false'
		});
		var doc = new jsPDF('p', 'pt');
		doc.autoTable(data.headers[0], data.body, {
			beforePageContent : function(data) {
				doc.text("Verification Report", 40, 30);
			}
		});
		doc.save('verificationReport.pdf');

	}

	if (radioValue == 3) {
		var table = $("#tblVerRept")[0];
		//Get number of rows/columns
		var rowLength = table.rows.length;
		var colLength = table.rows[0].cells.length;
		//Declare string to fill with table data
		var tableString = "";
		//Get column headers
		for (var i = 0; i < colLength; i++) {
			tableString += table.rows[0].cells[i].innerHTML.split(",").join("") + ",";
		}
		tableString = tableString.substring(0, tableString.length - 1);
		tableString += "\r\n";
		//Get row data
		for (var j = 1; j < rowLength; j++) {
			for (var k = 0; k < colLength; k++) {
				tableString += Util.isDefined(table.rows[j].cells[k]) ? table.rows[j].cells[k].innerHTML.split(",").join("") + "," : '';
			}
			tableString += "\r\n";
		}
		//Save file
		if (navigator.appName == "Microsoft Internet Explorer") {
			//Optional: If you run into delimiter issues (where the commas are not interpreted and all data is one cell), then use this line to manually specify the delimeter
			tableString = 'sep=,\r\n' + tableString;
			myFrame.document.open("text/html", "replace");
			myFrame.document.write(tableString);
			myFrame.document.close();
			myFrame.focus();
			myFrame.document.execCommand('SaveAs', true, 'verificationReport.csv');
		} else {
			csvData = 'data:Application/octet-stream,' + encodeURIComponent(tableString);
			$(event.target).attr({
				'href' : csvData,
				'target' : '_blank',
				'download' : 'verificationReport.csv'
			});
		}
	}
};
/*
 * Method added for Safari browser.
 * This will download XLSX format excel file for safari browser.
 */
safariExcelDownload = function() {
	var worksheet_template = '<?xml version="1.0"?><ss:Workbook xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">' + '<ss:Styles><ss:Style ss:ID="1"><ss:Font ss:Bold="1"/></ss:Style></ss:Styles><ss:Worksheet ss:Name="Sheet1">' + '<ss:Table>{{ROWS}}</ss:Table></ss:Worksheet></ss:Workbook>';
	var row_template = '<ss:Row ss:StyleID="1"><ss:Cell><ss:Data ss:Type="String">{{name}}</ss:Data></ss:Cell></ss:Row>';

	var rows = document.getElementById("tblVerRept").getElementsByTagName('tr');
	var row_data = '';
	for ( i = 0; i < rows.length; i++) {
		columns = rows[i].getElementsByTagName('th');
		for ( col = 0; col < columns.length; col++) {
			row_data += row_template.replace('{{name}}', columns[col].innerHTML);
		}
		tdData = rows[i].getElementsByTagName('td');
		for ( col1 = 0; col1 < tdData.length; col1++) {
			row_data += row_template.replace('{{name}}', tdData[col1].innerHTML);
		}
	}
	var worksheet = worksheet_template.replace('{{ROWS}}', row_data);
	//var base64data = "base64," + $.base64.encode(worksheet);

	window.open('data:application/vnd.ms-excel,' + worksheet);
	$('#export').attr('download', 'verificationReport.xls');
};

// basic legacy validation checking of the form to be submitted
LegacyValidation = function(field) {
	var valid = true,
	    val = field.value,
	    type = field.getAttribute("type"),
	    textType = (type === "text"),
	    chkbox = (type === "checkbox" || type === "radio"),
	    email = (type === "email"),
	    passwordType = (type === "password"),
	    selectDropDown = (field.nodeName == "SELECT"),
	    textArea = (field.nodeName == "textarea" || field.nodeName == "TEXTAREA"),
	    required = field.getAttribute("required"),
	    minlength = field.getAttribute("minlength"),
	    maxlength = field.getAttribute("max-length"),
	    pattern = field.getAttribute("pattern");
	// disabled fields should not be validated
	if (field.disabled)
		return valid;

	// value required?
	valid = valid && !required;
	if (valid && textType && field.id != 'companyName' && ($('#' + field.id).val() == '' || $('#' + field.id).val() == undefined)) {
		valid = false;
		//set error message to be displayed, if any, for all the fields expcept password.
		FvVariables.errorMessage = "Please enter the correct value in " + field.id;
	} else if (valid && textType && field.id != 'companyName' && !((!minlength || val.length >= minlength) && (!maxlength || val.length <= maxlength)
	)) {
		valid = false;
		var addText = '';
		if (maxlength != null) {
			addText = " and less than " + maxlength;
		}
		FvVariables.errorMessage = "Please enter value more than " + minlength + addText + "  characters in " + field.id;
	}
	//minlength or maxlength set?
	if (valid && chkbox) {
		if (!((!minlength || val.length >= minlength) && (!maxlength || val.length <= maxlength)
		)) {
			valid = false;
			var addText = '';
			if (maxlength != null) {
				addText = " and less than " + maxlength;
			}
			FvVariables.errorMessage = "Please enter value more than " + minlength + addText + "  characters in " + field.id;
		}
	}

	//select dropDown
	if (valid && selectDropDown) {
		if (val.length <= 0) {
			valid = false;
			//set error message to be displayed, if any, for all the fields expcept password.
			FvVariables.errorMessage = "Please check the number of characters in " + field.id;
		}
	}
	//text area
	if (valid && textArea) {
		if (!(!minlength || val.length >= minlength)) {
			valid = false;
			var addText = '';
			if (maxlength != null) {
				addText = "and less than " + maxlength;
			}
			FvVariables.errorMessage = "Please enter value more than " + minlength + addText + "  characters in " + field.id;
		} else if (!(!maxlength || val.length <= maxlength)) {
			valid = false;
			//set error message to be displayed, if any, .
			var addText = '';
			if (maxlength != null) {
				addText = " and less than " + maxlength;
			}
			FvVariables.errorMessage = "Please enter message more than " + minlength + addText + "  characters in " + field.id;
		}
	}

	// test pattern
	if (valid && pattern) {
		pattern = new RegExp(pattern);
		valid = pattern.test(val);
	}
	//test email null and pattern
	if (valid && email && ($('#' + field.id).val() == '' || $('#' + field.id).val() == undefined)) {
		valid = false;
		//set error message to be displayed, if any, for all the fields expcept password.
		FvVariables.errorMessage = "Please enter the correct value in " + field.id;
	} else if (valid && email) {
		var bool = Util.checkEmail($('#' + field.id).val());
		if (bool === false) {
			valid = false;
			//set error message to be displayed, if any, for all the fields expcept password.
			FvVariables.errorMessage = "Please enter the valid " + field.id;
		}
	}

	//Check for password empty and length check, as well as pattern check.
	if (valid && passwordType && ($('#' + field.id).val() == '' || $('#' + field.id).val() == undefined)) {
		valid = false;
		//set error message to be displayed, if any, for all the fields expcept password.
		FvVariables.errorMessage = "Please enter the correct value in " + field.id;
	} else if (valid && passwordType) {
		if (valid && $('#' + field.id).val().length < 8) {
			FvVariables.errorMessage = "Password must be at least 8 characters.";
			valid = false;
		} else if (valid) {
			var specialString = $('#' + field.id).val().match(/[$@$!%*#?&]/g);
			var digitString = $('#' + field.id).val().match(/\d+/g);
			if (specialString < 1) {
				FvVariables.errorMessage = "Passwords must include at least 1 special (#,@,&,$ etc) character.";
				valid = false;
			} else if (valid && digitString < 1) {
				FvVariables.errorMessage = "Passwords must include at least 1 numeric character.";
				valid = false;
			}
		}
	}
	return valid;
};

/*
 * Show progress bar for signup form password. This includes various check criteria.
 */
function isStrongPassword(e, event) {
	Util.resetAllErrorMessage(e);
	var myString = $("#" + e).val();
	var Stringlen = myString.length;
	var digitString = myString.match(/\d+/g);
	var charString = myString.match(/[a-zA-Z0-9]/g);
	var specialString = myString.match(/[$@$!%*#?&]/g);
	var color = "";
	var strength = "";
	var bar = $('#progressbar div'),
	    input = $('input');
	$('#progressbar').css('display', 'block');
	var password_strength = document.getElementById("password_strength");
	if (myString.length == 0) {
		password_strength.innerHTML = "";
		var len = Stringlen;
		bar.css('width', len * 0 + '%');
		validPassword = false;
		event.preventDefault();
	} else if (myString.length == 1) {
		bar.css('width', 0.10 * 100 + '%');
		bar.css('background', 'red');
		strength = "Weak";
		color = "red";
		password_strength.innerHTML = '&nbsp; ' + strength + '.';
		validPassword = true;
	} else if (myString.length >= 2 && myString.length < 8) {
		bar.css('width', 0.30 * 100 + '%');
		bar.css('background', 'red');
		strength = "Weak";
		color = "red";
		password_strength.innerHTML = '&nbsp; ' + strength + '.';
		validPassword = true;
	} else if (parseInt(Stringlen) >= 8) {
		bar.css('width', 0.50 * 100 + '%');
		bar.css('background', 'red');
		strength = "Weak";
		color = "red";
		password_strength.innerHTML = '&nbsp; ' + strength + '.';
		validPassword = true;
	}
	if (specialString < 1) {
		validPassword = false;
		event.preventDefault();
	} else {
		bar.css('width', 0.75 * 100 + '%');
		bar.css('background', 'red');
		strength = "Good";
		color = "darkorange";
		password_strength.innerHTML = '&nbsp;' + strength + '.';
		password_strength.style.color = color;
		validPassword = true;
	}
	if (digitString < 1) {
		validPassword = false;
		event.preventDefault();
	} else {
		bar.css('width', 10 * 10 + '%');
		bar.css('background', 'green');
		strength = "Strong";
		color = "green";
		password_strength.innerHTML = '&nbsp; ' + strength + '.';
		password_strength.style.color = color;
		validPassword = true;
	}
	return false;
}

/*
 * on load of Verification request screen do these task.
 */
initVerificationRequest = function() {
	//$('#ddlCountry').css('color', '#ccc');
	$('#ddlCountry').change(function() {
		var current = $('#ddlCountry').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#ddlCountry').css('color', '#6C265C !important');
		} else {
			$('#ddlCountry').css('color', '#ccc');
		}
	});

	//$('#callflow').css('color', '#ccc');
	$('#callflow').change(function() {
		var current = $('#callflow').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#callflow').css('color', '#6C265C !important');
		} else {
			$('#callflow').css('color', '#ccc');
		}
	});
	$.ajax({
		type : "GET",
		contentType : "application/json; charset=utf-8",
		url : "js/countries.json",
		data : "",
		dataType : "json",
		success : function(data) {
			//alert(data);
			var finalData = data;
			//alert(finalData);
			$("#ddlCountry").append($("<option class='placeholder_color' disabled selected></option>").val("").html('Select'));
			$.each(finalData, function(key, value) {
				$("#ddlCountry").append($("<option class='otherSelectOptions'></option>").val(value.code).html(value.name));
			});
		},
		error : function(result) {
			alert("Error");
		}
	});
	$('#callflow').change(function() {
		$('#appSecret').val('');
		var sessionId = Util.getCookie(CookieNames()['sessionId']);
		var userId = Util.getCookie(CookieNames()['userId']);
		var customerId = Util.getCookie(CookieNames()['customerId']);
		fetchAllDemoApps(sessionId, userId, customerId);
	});

	// get the call flows data to be populated on screen
	var guiData = {
		elid : 'callflow',
		beforeSend : FvApiCallbacks.getCallFlowsApi.beforeSend,
		callback : FvApiCallbacks.getCallFlowsApi.success
	};
	FvApis.getAllCallFlows({
		data : {
			guiData : guiData,
			getPostData : FvApiCallbacks.getCallFlowsApi.getPostData
		}
	});

	$('#verficationReqDetailsDiv, #verficationRespDetailsDiv').css('display', 'none');
	var sessionId = Util.getCookie(CookieNames()['sessionId']);
	var userId = Util.getCookie(CookieNames()['userId']);
	// populate customer id on screen
	var customerId = Util.getCookie(CookieNames()['customerId']);
	$('#customerId').val(customerId);
	setTimeout(function() {
		var sessionId = Util.getCookie(CookieNames()['sessionId']);
		var userId = Util.getCookie(CookieNames()['userId']);
		var customerId = Util.getCookie(CookieNames()['customerId']);
		fetchAllDemoApps(sessionId, userId, customerId);
	}, 1000);

	$('#verificationReqBtn').on('click', function(event) {
		var fields = document.getElementsByTagName('INPUT');
		validationCheckVar = Util.validateForm(fields);
		if (!validationCheckVar) {
			event.preventDefault();
		} else {
			var fields = document.getElementsByTagName('SELECT');
			validationCheckVar = Util.validateForm(fields);
			if (!validationCheckVar) {
				event.preventDefault();
			} else {
				submitVerficationReqCall();
				return true;
			}
		}
	});

	$('body').on('keydown', 'input', function(e) {
		if (e.which === 9) {
			Util.validateSingleField(e);
		}
	});

	$('#customerId,#callflow,#appSecret,#ddlCountry,#number').blur(function(e) {
		Util.validateSingleField(e);
	});
};
/*
 * On load of my profile, do these tasks.
 */
initMyProfile = function() {
	//$('#ddlCountry').css('color', '#ccc');
	$('#ddlCountry').change(function() {
		var current = $('#ddlCountry').val();
		if (current != 'null' && current != '' && current != undefined) {
			$('#ddlCountry').css('color', '#6C265C !important');
		} else {
			$('#ddlCountry').css('color', '#ccc');
		}
	});
	$.ajax({
		type : "GET",
		contentType : "application/json; charset=utf-8",
		url : "js/countries.json",
		data : "",
		dataType : "json",
		success : function(data) {
			//alert(data);
			var finalData = data;
			//alert(finalData);

			$("#ddlCountry").append($("<option class='placeholder_color' disabled selected></option>").val("").html('Select'));
			$.each(finalData, function(key, value) {
				$("#ddlCountry").append($("<option class='otherSelectOptions'></option>").val(value.code).html(value.name));
			});
		},
		error : function(result) {
			alert("Error");
		}
	});
};
/*
 * Before on load of my profile screen, do the following tasks.
 */
beforInitMyProfile = function() {
	$('body').on('keydown', 'input', function(e) {
		//console.log(this.value);
		if (e.which === 32 && e.target.selectionStart === 0) {
			return false;
		}
	});

	$("#whenjoined").datepicker({
		minDate : new Date(2014, 0, 1),
		maxDate : new Date(),
		dateFormat : 'yy/mm/dd',
		constrainInput : true
	});

	$('#appnameuser').multiselect({
		includeSelectAllOption : false
	});
	$('#appnamemanageapp').multiselect({
		includeSelectAllOption : true,
		onDropdownHide : function() {
			var guiData = {
				tableid : 'tbAppDetails',
				callback : FvApiCallbacks.getAppDetailsApi.updateAppDetailsTable
			};
			var evData = {
				guiData : guiData,
				getPostData : FvApiCallbacks.getAppDetailsApi.getPostData
			};
			FvApis.getDetailsForApps({
				data : evData
			});
		}
	});
	$(".btn-group button").find("span").css({
		"font-weight" : "bold"
	});
	$("#tabs").tabs();
	initUserProfile();
	$(".btn-group button").find("span").css({
		"font-weight" : "bold"
	});
	$("#tabs").tabs();
	$("#ManageApps").paging({
		limit : 5
	});
	$('#editappnemeuser').multiselect({
		includeSelectAllOption : true
	});
	$(".btn-group button").find("span").css({
		"font-weight" : "bold"
	});
	$("#afterLogin").append(dynamichtml.topnavafterlogin);
	$("#afterloginfooter").append(dynamichtml.footernavdirafterlogin);
	$("#_myaccount").addClass('activenav');
};

/*
 * Before load of Verification report do
 */
beforeInitVerificationReport = function() {
	$("#exportXLS").hide();
	$('#excel').on('click', function() {
		$("#export").hide();
		$("#exportXLS").show();
	});
	$('#pdf,#csv').on('click', function() {
		$("#export").show();
		$("#exportXLS").hide();
	});
	$('#summarytable').paging({
		limit : 5
	});
	$('#verificationtable').paging({
		limit : 5
	});
	$('#financialtable').paging({
		limit : 5
	});
	$("#fromdate").datepicker({
		minDate : new Date(2014, 0, 1),
		dateFormat : 'yy-mm-dd',
		maxDate : new Date()
	});
	$("#todate").datepicker({
		minDate : new Date(2014, 0, 1),
		dateFormat : 'yy-mm-dd',
		maxDate : new Date()
	});
	$("#fromdate").datepicker({
		onSelect : function() {
			// The "this" keyword refers to the input (in this case: #someinput)
			this.focus();
		}
	});
};

// Here we run a very simple test of the Graph API after login is
// successful.  See statusChangeCallback() for when this call is made.
testAPI = function(accessToken, loginType, boolLogout) {
	$('.se-pre-con').css('display', 'block');
	//console.log(accessToken);
	FB.api('/me?access_token=' + accessToken + "&fields=id,name,email", function(response) {

		if (!Util.isDefined(response.email)) {
			var errormsg = FvAlerts.SOCIAL_LOGIN_EMAIL_NOT_FOUND;
			Util.alert_message('#alert_template', errormsg);
			return false;
		}

		//console.log(response);
		FvConsts.socialLoginType = 'fb';
		var postData = {};

		postData['customerName'] = response.name;
		postData['email'] = response.email;
		postData['userSocialId'] = response.id;
		//console.log("before postData : " + postData);
		postData = JSON.stringify(postData);
		//console.log("after postData : " + postData);
		var url = '';
		if (loginType == 'signUp') {
			url = FvConsts.socialLoginApiBaseUrl + "social/signup/" + FvConsts.socialLoginType;
		} else {
			url = FvConsts.socialLoginApiBaseUrl + "session/loginViaSocialAuth/" + FvConsts.socialLoginType;
		}
		$.ajax({
			type : "POST",
			data : postData,
			dataType : 'JSON',
			contentType : 'application/json',
			url : url,
			success : function(data) {
				finalData = data.data;
				if (data.code == 200) {
					withLoginSuccessCode200(data);
					if (boolLogout == 'logout') {
						FB.logout(function(response) {
						});
					}
				} else {
					//in case of success and code !=200 ie other then 200 ie Email already registered.
					FB.logout(function(response) {
						var errormsg = Util.isDefined(data.errorMsg) ? (data.errorMsg.indexOf("_") >= 0 ? data.errorMsg.replace(FvVariables.messageRegrex, " ") : data.errorMsg) : FvAlerts.SYSTEM_ERROR;
						Util.alert_message('#alert_template', errormsg);
					});
				}
			},
			error : function(msg) {
				FB.logout(function(response) {
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
				});
			}
		});
	});
	$('.se-pre-con').css('display', 'none');
};

statusChangeCallback = function(response, loginType) {
	if (response.status === 'connected') {
		//console.log("already connected");
		//console.log(response);
		//testAPI($('#accessToken').val());
		testAPI(response.authResponse.accessToken, loginType, '');
	} else if (response.status === 'not_authorized') {
		// The person is logged into Facebook, but not your app.
		//console.log("not authorized");
		document.getElementById('status').innerHTML = 'Please log ' + 'into this app.';
		FB.login(function(response) {
			//console.log(response);
			if (Util.isDefined(response.authResponse)) {
				testAPI(response.authResponse.accessToken, loginType, '');
			}
		}, {
			scope : 'email'
		});
	} else {
		//console.log("not signed up and not logged in into fb");
		FB.login(function(response) {
			//console.log("not logged into fb");
			if (response.authResponse == null) {
				//console.log("null response.authResponse.accessToken");
			} else {
				//console.log("got value for response.authResponse.accessToken");
				if (Util.isDefined(response.authResponse)) {
					testAPI(response.authResponse.accessToken, loginType, 'logout');
				}

			}
		}, {
			scope : 'email'
		});
	}
};

withLoginSuccessCode200 = function(data) {
	$('.se-pre-con').css('display', 'block');
	var guiData = {
		elid : 'status',
		beforeSend : FvApiCallbacks.loginApi.beforeSend,
		uiCleanup : FvApiCallbacks.loginApi.uiCleanup,
		callback : FvApiCallbacks.loginApi.success
	};
	// set the cookies
	var cnames = CookieNames();
	for (var key in cnames) {
		if (data.data[0].hasOwnProperty(CookieNames()[key])) {
			Util.setCookie(CookieNames()[key], data.data[0][CookieNames()[key]]);
		}
	}
	//console.log("Fetch the user details");
	if (data.data[0].guest == false) {
		Util.setCookie(CookieNames()['isGuest'], 'false');
		FvApis.getUserDetails({
			data : {
				guiData : {
					elid : 'status',
					uiCleanup : FvApiCallbacks.loginApi.uiCleanup,
					callback : function(guiData, data) {
						//console.log("inside the callback for getUserDetails");
						if (data.code == '200') {
							Util.setCookie(CookieNames()['customerId'], data.data[0][CookieNames()['customerId']]);
							Util.setCookie(CookieNames()['timeZone'], data.data[0][CookieNames()['timeZone']]);
							window.location.href = "dashboard.html";
						} else {
							if (Util.isDefined(guiData) && Util.isDefined(guiData.uiCleanup)) {
								guiData.uiCleanup(guiData);
							}
							Util.alert_message('#alert_template', 'Unexpected error for getUserDetails API, try later');
						}
					}
				},
				getPostData : function() {
					return {
						sessionId : Util.getCookie(CookieNames()['sessionId']),
						userId : Util.getCookie(CookieNames()['userId'])
					};
				}
			}
		});
		$('.se-pre-con').css('display', 'none');
	} else {
		Util.setCookie(CookieNames()['isGuest'], 'true');
		window.location.href = "user-verification.html";
		$('.se-pre-con').css('display', 'none');
	}
};

// Here we run a very simple test of the Graph API after login is
// successful.  See statusChangeCallback() for when this call is made.
socialLoginToFoneverify = function(name, email, id, action) {
	$('.se-pre-con').css('display', 'block');
	var postData = {};
	postData['customerName'] = name;
	postData['email'] = email;
	postData['userSocialId'] = id;
	postData = JSON.stringify(postData);
	var url = "";
	if (action == 'signup') {
		url = FvConsts.socialLoginApiBaseUrl + "social/signup/" + FvConsts.socialLoginType;
	} else {
		url = FvConsts.socialLoginApiBaseUrl + "session/loginViaSocialAuth/" + FvConsts.socialLoginType;
	}

	$.ajax({
		type : "POST",
		data : postData,
		dataType : 'JSON',
		contentType : 'application/json',
		url : url,
		success : function(data) {
			finalData = data.data;
			if (data.code == 200) {
				withLoginSuccessCode200(data);
			} else {
				//in case of success and code !=200 ie other then 200 ie Email already registered.
				if (data.code == 501) {
					var errorMsgFromDB = data.errorMsg.replace(FvVariables.messageRegrex, " ") + ". " + "<a class=' underline' href='signin.html'>PLEASE SIGN IN.</a>";
					var errormsg = Util.isDefined(data.errorMsg) ? (data.errorMsg.indexOf("_") >= 0 ? errorMsgFromDB : data.errorMsg) : FvAlerts.SYSTEM_ERROR;
					Util.alert_message('#alert_template', errormsg);
				} else {
					var errormsg = Util.isDefined(data.errorMsg) ? (data.errorMsg.indexOf("_") >= 0 ? data.errorMsg.replace(FvVariables.messageRegrex, " ") : data.errorMsg) : FvAlerts.SYSTEM_ERROR;
					Util.alert_message('#alert_template', errormsg);
				}
			}
			$('.se-pre-con').css('display', 'none');
		},
		error : function(msg) {
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
			$('.se-pre-con').css('display', 'none');
		}
	});
};

/*
 * API to raise a new ticket on support integartion screen.
 */
raiseNewTicket = function() {
	$('#spinner').css('display', 'block');
	var url = '';
	var postData = {};
	var helpDesk = {};
	var customField = {};
	var sessionCommonDTO = {};
	postData['description'] = $('#message').val();
	postData['subject'] = $('#subject').val();
	postData['email'] = Util.getCookie(CookieNames()['email']);
	postData['priority'] = 4;
	postData['status'] = 2;

	customField['appname'] = $('#appName').val();
	postData['custom_fields'] = customField;
	if (Util.isDefined($('#uploadFile').val())) {
		url = FvConsts.apiBaseUrl + FvConsts.supportNewTicketWithAttachment;
		postData['fileUpload'] = true;
		postData['fileName'] = FvVariables.fileName;
	} else {
		url = FvConsts.apiBaseUrl + FvConsts.supportNewTicketNoAttachment;
		postData['fileUpload'] = false;
	}
	sessionCommonDTO['sessionId'] = Util.getCookie(CookieNames()['sessionId']);
	sessionCommonDTO['userId'] = Util.getCookie(CookieNames()['userId']);
	//console.log(JSON.stringify(sessionCommonDTO));
	postData['sessionCommonDTO'] = sessionCommonDTO;
	postData['apiURL'] = "https://u2opiamobile.freshdesk.com/api/v2/tickets";
	postData['cc_emails'] = Util.getCookie(CookieNames()['email']);
	postData = JSON.stringify(postData);
	$.ajax({
		type : "POST",
		data : postData,
		dataType : 'JSON',
		contentType : 'application/json',
		url : url,
		success : function(data) {
			var finalData = (data.data).toString();
			//console.log("finalData first : " + finalData);
			finalData = Util.isDefined(finalData) ? JSON.parse(finalData).helpdesk_ticket : '';
			//console.log("finalData : " + finalData);
			location.href = 'support.html';
			$('#spinner').css('display', 'none');
		},
		error : function(msg) {
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
			$('#spinner').css('display', 'none');
		}
	});
};
/*
 * Fetch all tickets raised details to be displayed on support screen.
 */
fetchAllTickets = function() {
	$('#spinner').css('display', 'block');
	var tr = '';
	var serial = 0;
	var postData = {};
	var sessionCommonDTO = {};
	sessionCommonDTO['sessionId'] = Util.getCookie(CookieNames()['sessionId']);
	sessionCommonDTO['userId'] = Util.getCookie(CookieNames()['userId']);
	//console.log(JSON.stringify(sessionCommonDTO));
	postData['sessionCommonDTO'] = sessionCommonDTO;
	postData['apiURL'] = "https://u2opiamobile.freshdesk.com/helpdesk/tickets.json?email=" + Util.getCookie(CookieNames()['email']) + "&filter_name=all_tickets";

	postData = JSON.stringify(postData);
	var url = FvConsts.apiBaseUrl + FvConsts.fetchAllTicketsOfUser;
	$.ajax({
		type : "POST",
		data : postData,
		dataType : 'JSON',
		contentType : 'application/json',
		url : url,
		success : function(data) {
			//console.log(data);
			var finalData = (data.data).toString();
			//console.log("finalData first : " + finalData);
			finalData = Util.isDefined(finalData) ? JSON.parse(finalData) : '';
			$.each(finalData, function(index, value) {
				tr += "<tr id='support_row_" + index + "'>";
				serial = serial + 1;
				tr += "<td>" + serial + "</td>";
				tr += "<td id='ticket" + index + "'>" + value.display_id + "</td>";
				tr += "<td>" + value.requester_name + "</td>";
				var dateCreated = (value.created_at).toString();
				dateCreated = dateCreated.substring(0, dateCreated.indexOf('T')) + " " + dateCreated.substring(dateCreated.indexOf('T') + 1, dateCreated.lastIndexOf('-'));
				tr += "<td>" + dateCreated + "</td>";
				tr += "<td>" + value.subject + "</td>";
				var custom_field = value.custom_field;
				//console.log(custom_field);
				var appname = '';
				if (Util.isDefined(custom_field)) {
					$.each(custom_field, function(key, value) {
						appname = value;
					});
				}
				tr += "<td>" + appname + "</td>";
				tr += "<td>" + value.status + "</td>";
				tr += "<td>" + "<div class='margin-auto' id='viewTicket" + index + "' onclick='navigateToViewEdit(this);'><i class='fa fa-eye fa-lg btn'></i> / <i class='fa fa-pencil-square-o fa-lg btn'></i></div>" + "</td>";
				tr += "</tr>";
			});
			$("#SpTrackTicket").append(tr).DataTable({
				'aoColumnDefs' : [{
					'bSortable' : false,
					'aTargets' : [-1]
				}],
				"iDisplayLength" : 5,
				"bLengthChange" : false,
				"bInfo" : false,
				"oLanguage" : {
					"oPaginate" : {
						"sFirst" : "<",
						"sPrevious" : "<<",
						"sNext" : ">>",
						"sLast" : ">"
					},
				}
			});
			$('#spinner').css('display', 'none');
		},
		error : function(msg) {
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
			$('#spinner').css('display', 'none');
		}
	});
};

/*
 * On Upload of a file on raise new ticket screen and save it on backend
 */
function handleFileSelect(evt) {
	var files = evt.target.files;
	var reader = new FileReader();
	// Read in the image file as a data URL.
	FvVariables.fileObj = files[0];
	//console.log(files[0]);
	FvVariables.fileName = $('#uploadFile')[0].files[0].name;
	var formData = new FormData();
	formData.append('file', $('#uploadFile')[0].files[0]);
	formData.append('sessionId', Util.getCookie(CookieNames()['sessionId']));
	formData.append('userId', Util.getCookie(CookieNames()['userId']));
	$.ajax({
		url : FvConsts.apiBaseUrl + 'support/uploadFile',
		data : formData,
		cache : false,
		contentType : false,
		processData : false,
		type : 'POST',
		async : false,
		success : function(data) {
			//console.log(data);
		}
	});
}

/*
 * Called from Support screen and raise a new ticket on load.
 */
initSupportIntegration = function() {
	sessionStorage.clear();
	var customerId = Util.getCookie(CookieNames()['customerId']);
	$('#customerId').text(customerId);
	if (Util.isDefined(document.getElementById('uploadFile')))
		document.getElementById('uploadFile').addEventListener('change', handleFileSelect, false);
	$('#raiseNewTicket').on('click', function() {
		raiseNewTicket();
	});
	$('#modalClose,#modalCloseByCross').on('click', function() {
		location.href = "support.html";
	});

	$(function() {
		fetchAllTickets();
		var guiData = {
			elid : 'appName',
			callback : FvApiCallbacks.getAllAppsApi.updateSupportAppList
		};
		FvApis.getAllAppsForUser({
			data : {
				guiData : guiData,
				getPostData : FvApiCallbacks.getAllAppsApi.getPostData
			}
		});

	});
	navigateToViewEdit = function(ele) {
		sessionStorage.setItem('supportBtnClick', 'view');
		id = (ele.id.toString()).charAt((ele.id.toString()).length - 1);
		sessionStorage.setItem('ticketId', $('#ticket' + id).html());
		location.href = 'view-edit-ticket.html';
	};

};

/*
 * Fetch details for selected ticket on support screen and display it on view/Edit support screen.
 */
fetchViewDetails = function() {
	$('#spinner').css('display', 'block');
	var postData = {};
	var sessionCommonDTO = {};
	sessionCommonDTO['sessionId'] = Util.getCookie(CookieNames()['sessionId']);
	sessionCommonDTO['userId'] = Util.getCookie(CookieNames()['userId']);
	//console.log(JSON.stringify(sessionCommonDTO));
	postData['sessionCommonDTO'] = sessionCommonDTO;
	postData['apiURL'] = "https://u2opiamobile.freshdesk.com/helpdesk/tickets/" + sessionStorage.getItem('ticketId') + ".json";

	postData = JSON.stringify(postData);
	var url = FvConsts.apiBaseUrl + FvConsts.viewTicket;
	$.ajax({
		type : "POST",
		data : postData,
		dataType : 'JSON',
		contentType : 'application/json',
		url : url,
		success : function(data) {
			//console.log(data);
			var finalData = (data.data).toString();
			finalData = Util.isDefined(finalData) ? JSON.parse(finalData).helpdesk_ticket : '';
			console.log(finalData);
			$('#ticketId').html(sessionStorage.getItem('ticketId'));
			var appname = '';
			$.each(finalData.custom_field, function(key, value) {
				appname = value;
			});
			$('#viewAppName').html(appname);
			$('#status').html(finalData.status_name);
			$('#ticketSubject').val(finalData.subject);
			var comment = '';
			$.each(finalData.notes, function(index, value) {

				var dateCreated = (value.note.created_at).toString();
				var value = value.note.body.toString();
				if (value.split('-%').length > 1) {
					valueObj = value.split('-%');
					var name = valueObj[1].replace('-%', '');
					name = valueObj[1].replace('%-', '');
					dateCreated = dateCreated.substring(0, dateCreated.indexOf('T')) + " at " + dateCreated.substring(dateCreated.indexOf('T') + 1, dateCreated.lastIndexOf('-'));
					comment += '<strong>' + name.toUpperCase() + ' created a note on ' + dateCreated + ' </strong></br>';
					comment += '<span >' + valueObj[0] + '</span></br></br>';
				} else {
					dateCreated = dateCreated.substring(0, dateCreated.indexOf('T')) + " at " + dateCreated.substring(dateCreated.indexOf('T') + 1, dateCreated.lastIndexOf('-'));
					comment += '<strong >AGENT ' + 'created a note on ' + dateCreated + ' </strong></br>';
					comment += '<span >' + value + '</span></br></br>';
				}

			});
			var attachments = finalData.attachments;
			if (attachments.length <= 0) {
				$('#downloadAttachment').css('display', 'none');
			} else {
				$('#filename').html(attachments[0].content_file_name);
				$('#fileSize').html(attachments[0].content_file_size + 'Kb');
				FvVariables.downloadableFile = attachments;
			}

			$('#ticketCommentHiscory').html(comment);
			$('#spinner').css('display', 'none');
		},
		error : function(msg) {
			Util.alert_message('#alert_template', 'Unexpected error, please try later');
			$('#spinner').css('display', 'none');
		}
	});
};

/*
 * Called method on View edit support integration screen load.
 */
initViewEditIntegration = function() {
	$(function() {
		if (sessionStorage.getItem('supportBtnClick') == null || sessionStorage.getItem('supportBtnClick') == 'view' || sessionStorage.getItem('supportBtnClick') == '') {
			$('#ticketCommentDiv').css('display', 'none');
			$('#viewEditTicket').css('display', 'none');
			$('#ticketSubject').attr('disable', true);
			fetchViewDetails();
		}
		// $('#selected_ticket_id').val(sessionStorage.getItem('ticketId'));
		$('#edit_ticket').on('click', function() {
			sessionStorage.setItem('supportBtnClick', 'edit');
			$('#edit_ticket').css('display', 'none');
			$('#ticketCommentDiv').css('display', 'block');
			$('#viewEditTicket').css('display', 'block');
			return false;
		});

		$('#downloadAttachment').on('click', function() {
			var link = document.createElement("a");
			link.download = FvVariables.downloadableFile[0].content_file_name;
			link.href = FvVariables.downloadableFile[0].attachment_url;
			link.click();
		});

		$('#viewEditTicket').on('click', function() {
			$('#spinner').css('display', 'block');
			var url = FvConsts.apiBaseUrl + FvConsts.updateTicket;
			var postData = {};
			var helpDesk = {};
			var customField = {};
			var sessionCommonDTO = {};
			// helpDesk['description'] = $('#ticketCommentHiscory').val();
			helpDesk['subject'] = $('#ticketSubject').val();
			helpDesk['email'] = Util.getCookie(CookieNames()['email']);
			helpDesk['priority'] = 4;
			helpDesk['status'] = 2;

			// customField['appName'] = 'U2opia';
			// helpDesk['custom_field'] = customField;
			//console.log(JSON.stringify(helpDesk));

			postData['helpdesk_ticket'] = helpDesk;

			sessionCommonDTO['sessionId'] = Util.getCookie(CookieNames()['sessionId']);
			sessionCommonDTO['userId'] = Util.getCookie(CookieNames()['userId']);
			//console.log(JSON.stringify(sessionCommonDTO));
			postData['sessionCommonDTO'] = sessionCommonDTO;
			// postData['apiURL'] = "https://u2opiamobile.freshdesk.com/helpdesk/tickets/" + sessionStorage.getItem('ticketId') + ".json";
			postData['apiURL'] = "https://u2opiamobile.freshdesk.com/helpdesk/tickets/" + sessionStorage.getItem('ticketId') + "/conversations/note.json";
			postData['cc_emails'] = Util.getCookie(CookieNames()['email']);

			var helpDeskNote = {};
			helpDeskNote['body'] = $('#ticketComment').val() + "-%" + Util.getCookie(CookieNames()['userName']) + "%-";
			postData['helpdesk_note'] = helpDeskNote;
			postData = JSON.stringify(postData);
			//console.log("postData : " + postData);
			$.ajax({
				type : "POST",
				data : postData,
				dataType : 'JSON',
				contentType : 'application/json',
				url : url,
				success : function(data) {
					var finalData = (data.data).toString();
					//console.log("finalData first : " + finalData);
					finalData = Util.isDefined(finalData) ? JSON.parse(finalData).ticket : '';
					//console.log("finalData : " + finalData);
					location.href = 'support.html';
					$('#spinner').css('display', 'none');
				},
				error : function(msg) {
					Util.alert_message('#alert_template', 'Unexpected error, please try later');
					$('#spinner').css('display', 'none');
				}
			});
		});
	});
};
